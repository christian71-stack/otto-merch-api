<?php
/**
 * ReturnsWarehouseCarrierReturnsWarehouseV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * ReturnsWarehouseCarrierReturnsWarehouseV2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReturnsWarehouseCarrierReturnsWarehouseV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReturnsWarehouseCarrier__ReturnsWarehouse-V2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'return_address_id' => 'string',
        'return_address_carrier_id' => 'string',
        'return_carrier' => 'string',
        'return_carrier_codes' => 'OneOfReturnsWarehouseCarrierReturnsWarehouseV2ReturnCarrierCodes'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'return_address_id' => null,
        'return_address_carrier_id' => null,
        'return_carrier' => null,
        'return_carrier_codes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'return_address_id' => 'returnAddressId',
        'return_address_carrier_id' => 'returnAddressCarrierId',
        'return_carrier' => 'returnCarrier',
        'return_carrier_codes' => 'returnCarrierCodes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'return_address_id' => 'setReturnAddressId',
        'return_address_carrier_id' => 'setReturnAddressCarrierId',
        'return_carrier' => 'setReturnCarrier',
        'return_carrier_codes' => 'setReturnCarrierCodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'return_address_id' => 'getReturnAddressId',
        'return_address_carrier_id' => 'getReturnAddressCarrierId',
        'return_carrier' => 'getReturnCarrier',
        'return_carrier_codes' => 'getReturnCarrierCodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RETURN_CARRIER_DHL = 'DHL';
    const RETURN_CARRIER_GLS = 'GLS';
    const RETURN_CARRIER_HERMES = 'HERMES';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnCarrierAllowableValues()
    {
        return [
            self::RETURN_CARRIER_DHL,
            self::RETURN_CARRIER_GLS,
            self::RETURN_CARRIER_HERMES,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['return_address_id'] = isset($data['return_address_id']) ? $data['return_address_id'] : null;
        $this->container['return_address_carrier_id'] = isset($data['return_address_carrier_id']) ? $data['return_address_carrier_id'] : null;
        $this->container['return_carrier'] = isset($data['return_carrier']) ? $data['return_carrier'] : null;
        $this->container['return_carrier_codes'] = isset($data['return_carrier_codes']) ? $data['return_carrier_codes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['return_address_id'] === null) {
            $invalidProperties[] = "'return_address_id' can't be null";
        }
        if ($this->container['return_address_carrier_id'] === null) {
            $invalidProperties[] = "'return_address_carrier_id' can't be null";
        }
        if ($this->container['return_carrier'] === null) {
            $invalidProperties[] = "'return_carrier' can't be null";
        }
        $allowedValues = $this->getReturnCarrierAllowableValues();
        if (!is_null($this->container['return_carrier']) && !in_array($this->container['return_carrier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'return_carrier', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets return_address_id
     *
     * @return string
     */
    public function getReturnAddressId()
    {
        return $this->container['return_address_id'];
    }

    /**
     * Sets return_address_id
     *
     * @param string $return_address_id Unique identifier of the returnWarehouse
     *
     * @return $this
     */
    public function setReturnAddressId($return_address_id)
    {
        $this->container['return_address_id'] = $return_address_id;

        return $this;
    }

    /**
     * Gets return_address_carrier_id
     *
     * @return string
     */
    public function getReturnAddressCarrierId()
    {
        return $this->container['return_address_carrier_id'];
    }

    /**
     * Sets return_address_carrier_id
     *
     * @param string $return_address_carrier_id Unique identifier for each returnCarrier, which is linked with a returnWarehouse
     *
     * @return $this
     */
    public function setReturnAddressCarrierId($return_address_carrier_id)
    {
        $this->container['return_address_carrier_id'] = $return_address_carrier_id;

        return $this;
    }

    /**
     * Gets return_carrier
     *
     * @return string
     */
    public function getReturnCarrier()
    {
        return $this->container['return_carrier'];
    }

    /**
     * Sets return_carrier
     *
     * @param string $return_carrier Name of the returnCarrier used in the returnWarehouse. Only the carrier DHL is allowed for returnWarehouse types INTERNATIONAL and INTERNATIONAL_CONSOLIDATION_HUB.
     *
     * @return $this
     */
    public function setReturnCarrier($return_carrier)
    {
        $allowedValues = $this->getReturnCarrierAllowableValues();
        if (!in_array($return_carrier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'return_carrier', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['return_carrier'] = $return_carrier;

        return $this;
    }

    /**
     * Gets return_carrier_codes
     *
     * @return OneOfReturnsWarehouseCarrierReturnsWarehouseV2ReturnCarrierCodes
     */
    public function getReturnCarrierCodes()
    {
        return $this->container['return_carrier_codes'];
    }

    /**
     * Sets return_carrier_codes
     *
     * @param OneOfReturnsWarehouseCarrierReturnsWarehouseV2ReturnCarrierCodes $return_carrier_codes GLSReturnCarrierCodes__ReturnsWarehouse-V2 (object) or DHLReturnCarrierCodes__ReturnsWarehouse-V2 (object) No return carrier codes when carrier in path is HERMES
     *
     * @return $this
     */
    public function setReturnCarrierCodes($return_carrier_codes)
    {
        $this->container['return_carrier_codes'] = $return_carrier_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
