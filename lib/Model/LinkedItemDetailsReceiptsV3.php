<?php
/**
 * LinkedItemDetailsReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * LinkedItemDetailsReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Additional information to an item directly related to the service. &lt;/br&gt;Object exists only if the service was sold together with an item
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinkedItemDetailsReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LinkedItemDetails__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_receipt_number' => 'string',
        'item_partner_name' => 'string',
        'sku' => 'string',
        'article_number' => 'string',
        'product_title' => 'string',
        'service_relations' => '\cbdesk\otto\Client\Model\ServiceRelationReceiptsV3[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_receipt_number' => null,
        'item_partner_name' => null,
        'sku' => null,
        'article_number' => null,
        'product_title' => null,
        'service_relations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_receipt_number' => 'itemReceiptNumber',
        'item_partner_name' => 'itemPartnerName',
        'sku' => 'sku',
        'article_number' => 'articleNumber',
        'product_title' => 'productTitle',
        'service_relations' => 'serviceRelations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_receipt_number' => 'setItemReceiptNumber',
        'item_partner_name' => 'setItemPartnerName',
        'sku' => 'setSku',
        'article_number' => 'setArticleNumber',
        'product_title' => 'setProductTitle',
        'service_relations' => 'setServiceRelations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_receipt_number' => 'getItemReceiptNumber',
        'item_partner_name' => 'getItemPartnerName',
        'sku' => 'getSku',
        'article_number' => 'getArticleNumber',
        'product_title' => 'getProductTitle',
        'service_relations' => 'getServiceRelations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_receipt_number'] = isset($data['item_receipt_number']) ? $data['item_receipt_number'] : null;
        $this->container['item_partner_name'] = isset($data['item_partner_name']) ? $data['item_partner_name'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['article_number'] = isset($data['article_number']) ? $data['article_number'] : null;
        $this->container['product_title'] = isset($data['product_title']) ? $data['product_title'] : null;
        $this->container['service_relations'] = isset($data['service_relations']) ? $data['service_relations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['article_number'] === null) {
            $invalidProperties[] = "'article_number' can't be null";
        }
        if ($this->container['product_title'] === null) {
            $invalidProperties[] = "'product_title' can't be null";
        }
        if ($this->container['service_relations'] === null) {
            $invalidProperties[] = "'service_relations' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_receipt_number
     *
     * @return string
     */
    public function getItemReceiptNumber()
    {
        return $this->container['item_receipt_number'];
    }

    /**
     * Sets item_receipt_number
     *
     * @param string $item_receipt_number Human-readable identifier refers to the receipt the linked item was billed. </br> Displayed only if item is billed with another receipt. </br> In case of receiptType * **PURCHASE** - **receiptNumber of purchase receipt**.</br> If this field is not present, you will find information in receipt.receiptNumber * **REFUND** - **receiptNumber of purchase receipt**. </br> If this field is not present ,you will find information in receipt.linkedReceiptNumber
     *
     * @return $this
     */
    public function setItemReceiptNumber($item_receipt_number)
    {
        $this->container['item_receipt_number'] = $item_receipt_number;

        return $this;
    }

    /**
     * Gets item_partner_name
     *
     * @return string
     */
    public function getItemPartnerName()
    {
        return $this->container['item_partner_name'];
    }

    /**
     * Sets item_partner_name
     *
     * @param string $item_partner_name Name of the partner who sold the linked item. </br>Displayed only if the partner is different from partner of the receipt
     *
     * @return $this
     */
    public function setItemPartnerName($item_partner_name)
    {
        $this->container['item_partner_name'] = $item_partner_name;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Stock keeping unit of the linked item. Unique item identifier on partner side </br>This information is not reliably provided for older receipts.
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string $article_number Unique Identifier of linked item the customer knows from order process.  ATTENTION: Different from the previous version, the field also contains the promotion. In last version the promotion was provided separately
     *
     * @return $this
     */
    public function setArticleNumber($article_number)
    {
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets product_title
     *
     * @return string
     */
    public function getProductTitle()
    {
        return $this->container['product_title'];
    }

    /**
     * Sets product_title
     *
     * @param string $product_title Product description of linked item the customer knows from the order process
     *
     * @return $this
     */
    public function setProductTitle($product_title)
    {
        $this->container['product_title'] = $product_title;

        return $this;
    }

    /**
     * Gets service_relations
     *
     * @return \cbdesk\otto\Client\Model\ServiceRelationReceiptsV3[]
     */
    public function getServiceRelations()
    {
        return $this->container['service_relations'];
    }

    /**
     * Sets service_relations
     *
     * @param \cbdesk\otto\Client\Model\ServiceRelationReceiptsV3[] $service_relations List of ServiceRelation objects. </br>Contains entries if services were sold  together with items otherwise list is empty
     *
     * @return $this
     */
    public function setServiceRelations($service_relations)
    {
        $this->container['service_relations'] = $service_relations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
