<?php
/**
 * DeliveryCostReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * DeliveryCostReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description List of billed logistic costs, if exists for this receipt. &lt;/br&gt;This list is only used in context of receiptType PURCHASE or REFUND. &lt;/br&gt;If there are no entries the lists is displayed as empty
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryCostReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryCost__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'int',
        'delivery_cost_type' => 'string',
        'unit_price' => '\cbdesk\otto\Client\Model\PriceReceiptsV3',
        'position_sum' => '\cbdesk\otto\Client\Model\PriceReceiptsV3',
        'price_modifications' => '\cbdesk\otto\Client\Model\PriceModificationReceiptsV3[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => 'int32',
        'delivery_cost_type' => null,
        'unit_price' => null,
        'position_sum' => null,
        'price_modifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
        'delivery_cost_type' => 'deliveryCostType',
        'unit_price' => 'unitPrice',
        'position_sum' => 'positionSum',
        'price_modifications' => 'priceModifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
        'delivery_cost_type' => 'setDeliveryCostType',
        'unit_price' => 'setUnitPrice',
        'position_sum' => 'setPositionSum',
        'price_modifications' => 'setPriceModifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
        'delivery_cost_type' => 'getDeliveryCostType',
        'unit_price' => 'getUnitPrice',
        'position_sum' => 'getPositionSum',
        'price_modifications' => 'getPriceModifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_COST_TYPE_STANDARD = 'DELIVERY_FEE_STANDARD';
    const DELIVERY_COST_TYPE_FREIGHT_SURCHARGE = 'DELIVERY_FEE_FREIGHT_SURCHARGE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryCostTypeAllowableValues()
    {
        return [
            self::DELIVERY_COST_TYPE_STANDARD,
            self::DELIVERY_COST_TYPE_FREIGHT_SURCHARGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['delivery_cost_type'] = isset($data['delivery_cost_type']) ? $data['delivery_cost_type'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['position_sum'] = isset($data['position_sum']) ? $data['position_sum'] : null;
        $this->container['price_modifications'] = isset($data['price_modifications']) ? $data['price_modifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['delivery_cost_type'] === null) {
            $invalidProperties[] = "'delivery_cost_type' can't be null";
        }
        $allowedValues = $this->getDeliveryCostTypeAllowableValues();
        if (!is_null($this->container['delivery_cost_type']) && !in_array($this->container['delivery_cost_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_cost_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['position_sum'] === null) {
            $invalidProperties[] = "'position_sum' can't be null";
        }
        if ($this->container['price_modifications'] === null) {
            $invalidProperties[] = "'price_modifications' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number Number of line item in which the information is printed on the pdf document of the receipt. </br>This information is not reliably provided for older receipts
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets delivery_cost_type
     *
     * @return string
     */
    public function getDeliveryCostType()
    {
        return $this->container['delivery_cost_type'];
    }

    /**
     * Sets delivery_cost_type
     *
     * @param string $delivery_cost_type Type of delivery costs for the shipment of physical goods. </br> Possible values: * **DELIVERY_FEE_STANDARD** - basic shipping costs * **DELIVERY_FEE_FREIGHT_SURCHARGE** - additional freight surcharge for bulky goods
     *
     * @return $this
     */
    public function setDeliveryCostType($delivery_cost_type)
    {
        $allowedValues = $this->getDeliveryCostTypeAllowableValues();
        if (!in_array($delivery_cost_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_cost_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_cost_type'] = $delivery_cost_type;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return \cbdesk\otto\Client\Model\PriceReceiptsV3
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param \cbdesk\otto\Client\Model\PriceReceiptsV3 $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets position_sum
     *
     * @return \cbdesk\otto\Client\Model\PriceReceiptsV3
     */
    public function getPositionSum()
    {
        return $this->container['position_sum'];
    }

    /**
     * Sets position_sum
     *
     * @param \cbdesk\otto\Client\Model\PriceReceiptsV3 $position_sum position_sum
     *
     * @return $this
     */
    public function setPositionSum($position_sum)
    {
        $this->container['position_sum'] = $position_sum;

        return $this;
    }

    /**
     * Gets price_modifications
     *
     * @return \cbdesk\otto\Client\Model\PriceModificationReceiptsV3[]
     */
    public function getPriceModifications()
    {
        return $this->container['price_modifications'];
    }

    /**
     * Sets price_modifications
     *
     * @param \cbdesk\otto\Client\Model\PriceModificationReceiptsV3[] $price_modifications List of additional fees and reductions represented as price modifications. </br>If there are no price modifications, an empty list is displayed
     *
     * @return $this
     */
    public function setPriceModifications($price_modifications)
    {
        $this->container['price_modifications'] = $price_modifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
