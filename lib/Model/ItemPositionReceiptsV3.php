<?php
/**
 * ItemPositionReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * ItemPositionReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description List of billed items, if exists. &lt;/br&gt;This list is only used in context of receiptType PURCHASE or REFUND. &lt;/br&gt;If there are no entries the lists is displayed as empty
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemPositionReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemPosition__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'int',
        'sku' => 'string',
        'expected_performance_period' => 'string',
        'article_number' => 'string',
        'product_title' => 'string',
        'variation_attributes' => 'string',
        'position_item_ids' => 'string[]',
        'quantity' => 'int',
        'unit_price' => '\cbdesk\otto\Client\Model\PriceReceiptsV3',
        'price_to_pay_per_position_items' => '\cbdesk\otto\Client\Model\PriceToPayPerPositionItemReceiptsV3[]',
        'position_sum' => '\cbdesk\otto\Client\Model\PriceReceiptsV3',
        'price_modifications' => '\cbdesk\otto\Client\Model\PriceModificationReceiptsV3[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => 'int32',
        'sku' => null,
        'expected_performance_period' => null,
        'article_number' => null,
        'product_title' => null,
        'variation_attributes' => null,
        'position_item_ids' => null,
        'quantity' => 'int32',
        'unit_price' => null,
        'price_to_pay_per_position_items' => null,
        'position_sum' => null,
        'price_modifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
        'sku' => 'sku',
        'expected_performance_period' => 'expectedPerformancePeriod',
        'article_number' => 'articleNumber',
        'product_title' => 'productTitle',
        'variation_attributes' => 'variationAttributes',
        'position_item_ids' => 'positionItemIds',
        'quantity' => 'quantity',
        'unit_price' => 'unitPrice',
        'price_to_pay_per_position_items' => 'priceToPayPerPositionItems',
        'position_sum' => 'positionSum',
        'price_modifications' => 'priceModifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
        'sku' => 'setSku',
        'expected_performance_period' => 'setExpectedPerformancePeriod',
        'article_number' => 'setArticleNumber',
        'product_title' => 'setProductTitle',
        'variation_attributes' => 'setVariationAttributes',
        'position_item_ids' => 'setPositionItemIds',
        'quantity' => 'setQuantity',
        'unit_price' => 'setUnitPrice',
        'price_to_pay_per_position_items' => 'setPriceToPayPerPositionItems',
        'position_sum' => 'setPositionSum',
        'price_modifications' => 'setPriceModifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
        'sku' => 'getSku',
        'expected_performance_period' => 'getExpectedPerformancePeriod',
        'article_number' => 'getArticleNumber',
        'product_title' => 'getProductTitle',
        'variation_attributes' => 'getVariationAttributes',
        'position_item_ids' => 'getPositionItemIds',
        'quantity' => 'getQuantity',
        'unit_price' => 'getUnitPrice',
        'price_to_pay_per_position_items' => 'getPriceToPayPerPositionItems',
        'position_sum' => 'getPositionSum',
        'price_modifications' => 'getPriceModifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['expected_performance_period'] = isset($data['expected_performance_period']) ? $data['expected_performance_period'] : null;
        $this->container['article_number'] = isset($data['article_number']) ? $data['article_number'] : null;
        $this->container['product_title'] = isset($data['product_title']) ? $data['product_title'] : null;
        $this->container['variation_attributes'] = isset($data['variation_attributes']) ? $data['variation_attributes'] : null;
        $this->container['position_item_ids'] = isset($data['position_item_ids']) ? $data['position_item_ids'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['price_to_pay_per_position_items'] = isset($data['price_to_pay_per_position_items']) ? $data['price_to_pay_per_position_items'] : null;
        $this->container['position_sum'] = isset($data['position_sum']) ? $data['position_sum'] : null;
        $this->container['price_modifications'] = isset($data['price_modifications']) ? $data['price_modifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['article_number'] === null) {
            $invalidProperties[] = "'article_number' can't be null";
        }
        if ($this->container['product_title'] === null) {
            $invalidProperties[] = "'product_title' can't be null";
        }
        if ($this->container['position_item_ids'] === null) {
            $invalidProperties[] = "'position_item_ids' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['position_sum'] === null) {
            $invalidProperties[] = "'position_sum' can't be null";
        }
        if ($this->container['price_modifications'] === null) {
            $invalidProperties[] = "'price_modifications' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number Number of line item in which the information is printed on the pdf document. </br>This information is not reliably provided for older receipts
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Stock keeping unit of item. Unique item identifier on partner side. </br>This information is not reliably provided for older receipts
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets expected_performance_period
     *
     * @return string
     */
    public function getExpectedPerformancePeriod()
    {
        return $this->container['expected_performance_period'];
    }

    /**
     * Sets expected_performance_period
     *
     * @param string $expected_performance_period Vague performance date. As the exact date is not known when generating the receipt, this information gives an indication when the item will be shipped
     *
     * @return $this
     */
    public function setExpectedPerformancePeriod($expected_performance_period)
    {
        $this->container['expected_performance_period'] = $expected_performance_period;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string $article_number Unique Identifier of item the customer knows from order process.  ATTENTION: Different from the previous version, the field also contains the promotion. In last version the promotion was provided separately
     *
     * @return $this
     */
    public function setArticleNumber($article_number)
    {
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets product_title
     *
     * @return string
     */
    public function getProductTitle()
    {
        return $this->container['product_title'];
    }

    /**
     * Sets product_title
     *
     * @param string $product_title Product description of item the customer knows from the order process
     *
     * @return $this
     */
    public function setProductTitle($product_title)
    {
        $this->container['product_title'] = $product_title;

        return $this;
    }

    /**
     * Gets variation_attributes
     *
     * @return string
     */
    public function getVariationAttributes()
    {
        return $this->container['variation_attributes'];
    }

    /**
     * Sets variation_attributes
     *
     * @param string $variation_attributes Additional attributes for unique description of an item, if different variants of the item are possible. (String of comma seperated dimensions)  ATTENTION: In previous version the information was called dimensions
     *
     * @return $this
     */
    public function setVariationAttributes($variation_attributes)
    {
        $this->container['variation_attributes'] = $variation_attributes;

        return $this;
    }

    /**
     * Gets position_item_ids
     *
     * @return string[]
     */
    public function getPositionItemIds()
    {
        return $this->container['position_item_ids'];
    }

    /**
     * Sets position_item_ids
     *
     * @param string[] $position_item_ids List of unique identifiers of specific instances of ordered items. A (salesOrder)PositionItem is the smallest unit of an item that can be ordered. </br>If quantity of the specific LineItem object is bigger than one the list contains more than one entry
     *
     * @return $this
     */
    public function setPositionItemIds($position_item_ids)
    {
        $this->container['position_item_ids'] = $position_item_ids;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return \cbdesk\otto\Client\Model\PriceReceiptsV3
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param \cbdesk\otto\Client\Model\PriceReceiptsV3 $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets price_to_pay_per_position_items
     *
     * @return \cbdesk\otto\Client\Model\PriceToPayPerPositionItemReceiptsV3[]
     */
    public function getPriceToPayPerPositionItems()
    {
        return $this->container['price_to_pay_per_position_items'];
    }

    /**
     * Sets price_to_pay_per_position_items
     *
     * @param \cbdesk\otto\Client\Model\PriceToPayPerPositionItemReceiptsV3[] $price_to_pay_per_position_items Price of each unit of the item i.e., price of each positionItemId.</br>It will be available only for PURCHASE receipt
     *
     * @return $this
     */
    public function setPriceToPayPerPositionItems($price_to_pay_per_position_items)
    {
        $this->container['price_to_pay_per_position_items'] = $price_to_pay_per_position_items;

        return $this;
    }

    /**
     * Gets position_sum
     *
     * @return \cbdesk\otto\Client\Model\PriceReceiptsV3
     */
    public function getPositionSum()
    {
        return $this->container['position_sum'];
    }

    /**
     * Sets position_sum
     *
     * @param \cbdesk\otto\Client\Model\PriceReceiptsV3 $position_sum position_sum
     *
     * @return $this
     */
    public function setPositionSum($position_sum)
    {
        $this->container['position_sum'] = $position_sum;

        return $this;
    }

    /**
     * Gets price_modifications
     *
     * @return \cbdesk\otto\Client\Model\PriceModificationReceiptsV3[]
     */
    public function getPriceModifications()
    {
        return $this->container['price_modifications'];
    }

    /**
     * Sets price_modifications
     *
     * @param \cbdesk\otto\Client\Model\PriceModificationReceiptsV3[] $price_modifications List of additional fees and reductions represented as price modifications. </br>Currently we only know reductions. </br>If there are no entries the list is displayed as empty
     *
     * @return $this
     */
    public function setPriceModifications($price_modifications)
    {
        $this->container['price_modifications'] = $price_modifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
