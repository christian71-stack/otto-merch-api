<?php
/**
 * ServicePartialRefundPositionReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * ServicePartialRefundPositionReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description List of billed partial refunds of services.
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServicePartialRefundPositionReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServicePartialRefundPosition__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'int',
        'service_type' => 'string',
        'service_name' => 'string',
        'service_position_item_ids' => 'string[]',
        'partial_refund_amount' => '\cbdesk\otto\Client\Model\PriceReceiptsV3',
        'insurance_period' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => 'int32',
        'service_type' => null,
        'service_name' => null,
        'service_position_item_ids' => null,
        'partial_refund_amount' => null,
        'insurance_period' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
        'service_type' => 'serviceType',
        'service_name' => 'serviceName',
        'service_position_item_ids' => 'servicePositionItemIds',
        'partial_refund_amount' => 'partialRefundAmount',
        'insurance_period' => 'insurancePeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
        'service_type' => 'setServiceType',
        'service_name' => 'setServiceName',
        'service_position_item_ids' => 'setServicePositionItemIds',
        'partial_refund_amount' => 'setPartialRefundAmount',
        'insurance_period' => 'setInsurancePeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
        'service_type' => 'getServiceType',
        'service_name' => 'getServiceName',
        'service_position_item_ids' => 'getServicePositionItemIds',
        'partial_refund_amount' => 'getPartialRefundAmount',
        'insurance_period' => 'getInsurancePeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SERVICE_TYPE_DISPOSAL = 'DISPOSAL';
    const SERVICE_TYPE_INSURANCE = 'INSURANCE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceTypeAllowableValues()
    {
        return [
            self::SERVICE_TYPE_DISPOSAL,
            self::SERVICE_TYPE_INSURANCE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['service_position_item_ids'] = isset($data['service_position_item_ids']) ? $data['service_position_item_ids'] : null;
        $this->container['partial_refund_amount'] = isset($data['partial_refund_amount']) ? $data['partial_refund_amount'] : null;
        $this->container['insurance_period'] = isset($data['insurance_period']) ? $data['insurance_period'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getServiceTypeAllowableValues();
        if (!is_null($this->container['service_type']) && !in_array($this->container['service_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'service_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number Number of line item in which the information is printed on the pdf document of the receipt. </br>This information is not reliably provided for older receipts
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param string $service_type Categorization that classifies services according to their main characteristics. Services of the same type are often treated in the same way. Currently, the processing of the following types are possible: * **DISPOSAL** - Free take away of old technical devices required by law * **INSURANCE** - Product insurance
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $allowedValues = $this->getServiceTypeAllowableValues();
        if (!is_null($service_type) && !in_array($service_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string $service_name Service name of a special specification of a service type that the customer has seen in the ordering process.
     *
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets service_position_item_ids
     *
     * @return string[]
     */
    public function getServicePositionItemIds()
    {
        return $this->container['service_position_item_ids'];
    }

    /**
     * Sets service_position_item_ids
     *
     * @param string[] $service_position_item_ids List of unique identifiers of specific instances of services. A servicePositionItem is the smallest unit of a service that can be ordered. If quantity of this object is bigger than one the list contains more than one entry.
     *
     * @return $this
     */
    public function setServicePositionItemIds($service_position_item_ids)
    {
        $this->container['service_position_item_ids'] = $service_position_item_ids;

        return $this;
    }

    /**
     * Gets partial_refund_amount
     *
     * @return \cbdesk\otto\Client\Model\PriceReceiptsV3
     */
    public function getPartialRefundAmount()
    {
        return $this->container['partial_refund_amount'];
    }

    /**
     * Sets partial_refund_amount
     *
     * @param \cbdesk\otto\Client\Model\PriceReceiptsV3 $partial_refund_amount partial_refund_amount
     *
     * @return $this
     */
    public function setPartialRefundAmount($partial_refund_amount)
    {
        $this->container['partial_refund_amount'] = $partial_refund_amount;

        return $this;
    }

    /**
     * Gets insurance_period
     *
     * @return int
     */
    public function getInsurancePeriod()
    {
        return $this->container['insurance_period'];
    }

    /**
     * Sets insurance_period
     *
     * @param int $insurance_period Services of serviceType WARRANTY or INSURANCE could be offered with different durations. This field will show the duration as month.
     *
     * @return $this
     */
    public function setInsurancePeriod($insurance_period)
    {
        $this->container['insurance_period'] = $insurance_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
