<?php
/**
 * GetShippingProfileResponseShippingProfilesV1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * GetShippingProfileResponseShippingProfilesV1 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetShippingProfileResponseShippingProfilesV1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetShippingProfileResponse__ShippingProfiles-V1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping_profile_id' => 'string',
        'shipping_profile_name' => 'string',
        'working_days' => 'string[]',
        'order_cutoff' => 'string',
        'delivery_type' => 'string',
        'default_processing_time' => 'int',
        'transport_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping_profile_id' => null,
        'shipping_profile_name' => null,
        'working_days' => null,
        'order_cutoff' => 'HH:MM, 24 hours format, CET timezone',
        'delivery_type' => null,
        'default_processing_time' => 'int64',
        'transport_time' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_profile_id' => 'shippingProfileId',
        'shipping_profile_name' => 'shippingProfileName',
        'working_days' => 'workingDays',
        'order_cutoff' => 'orderCutoff',
        'delivery_type' => 'deliveryType',
        'default_processing_time' => 'defaultProcessingTime',
        'transport_time' => 'transportTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_profile_id' => 'setShippingProfileId',
        'shipping_profile_name' => 'setShippingProfileName',
        'working_days' => 'setWorkingDays',
        'order_cutoff' => 'setOrderCutoff',
        'delivery_type' => 'setDeliveryType',
        'default_processing_time' => 'setDefaultProcessingTime',
        'transport_time' => 'setTransportTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_profile_id' => 'getShippingProfileId',
        'shipping_profile_name' => 'getShippingProfileName',
        'working_days' => 'getWorkingDays',
        'order_cutoff' => 'getOrderCutoff',
        'delivery_type' => 'getDeliveryType',
        'default_processing_time' => 'getDefaultProcessingTime',
        'transport_time' => 'getTransportTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WORKING_DAYS_MONDAY = 'MONDAY';
    const WORKING_DAYS_TUESDAY = 'TUESDAY';
    const WORKING_DAYS_WEDNESDAY = 'WEDNESDAY';
    const WORKING_DAYS_THURSDAY = 'THURSDAY';
    const WORKING_DAYS_FRIDAY = 'FRIDAY';
    const WORKING_DAYS_SATURDAY = 'SATURDAY';
    const WORKING_DAYS_SUNDAY = 'SUNDAY';
    const DELIVERY_TYPE_PARCEL = 'PARCEL';
    const DELIVERY_TYPE_FORWARDER_PREFERREDLOCATION = 'FORWARDER_PREFERREDLOCATION';
    const DELIVERY_TYPE_FORWARDER_CURBSIDE = 'FORWARDER_CURBSIDE';
    const DELIVERY_TYPE_FORWARDER_HEAVYDUTY = 'FORWARDER_HEAVYDUTY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWorkingDaysAllowableValues()
    {
        return [
            self::WORKING_DAYS_MONDAY,
            self::WORKING_DAYS_TUESDAY,
            self::WORKING_DAYS_WEDNESDAY,
            self::WORKING_DAYS_THURSDAY,
            self::WORKING_DAYS_FRIDAY,
            self::WORKING_DAYS_SATURDAY,
            self::WORKING_DAYS_SUNDAY,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_PARCEL,
            self::DELIVERY_TYPE_FORWARDER_PREFERREDLOCATION,
            self::DELIVERY_TYPE_FORWARDER_CURBSIDE,
            self::DELIVERY_TYPE_FORWARDER_HEAVYDUTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping_profile_id'] = isset($data['shipping_profile_id']) ? $data['shipping_profile_id'] : null;
        $this->container['shipping_profile_name'] = isset($data['shipping_profile_name']) ? $data['shipping_profile_name'] : null;
        $this->container['working_days'] = isset($data['working_days']) ? $data['working_days'] : null;
        $this->container['order_cutoff'] = isset($data['order_cutoff']) ? $data['order_cutoff'] : null;
        $this->container['delivery_type'] = isset($data['delivery_type']) ? $data['delivery_type'] : null;
        $this->container['default_processing_time'] = isset($data['default_processing_time']) ? $data['default_processing_time'] : null;
        $this->container['transport_time'] = isset($data['transport_time']) ? $data['transport_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipping_profile_id'] === null) {
            $invalidProperties[] = "'shipping_profile_id' can't be null";
        }
        if ($this->container['shipping_profile_name'] === null) {
            $invalidProperties[] = "'shipping_profile_name' can't be null";
        }
        if ($this->container['working_days'] === null) {
            $invalidProperties[] = "'working_days' can't be null";
        }
        if ($this->container['order_cutoff'] === null) {
            $invalidProperties[] = "'order_cutoff' can't be null";
        }
        if ($this->container['delivery_type'] === null) {
            $invalidProperties[] = "'delivery_type' can't be null";
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['default_processing_time'] === null) {
            $invalidProperties[] = "'default_processing_time' can't be null";
        }
        if ($this->container['transport_time'] === null) {
            $invalidProperties[] = "'transport_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_profile_id
     *
     * @return string
     */
    public function getShippingProfileId()
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param string $shipping_profile_id Unique identifier for each shipping profile
     *
     * @return $this
     */
    public function setShippingProfileId($shipping_profile_id)
    {
        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets shipping_profile_name
     *
     * @return string
     */
    public function getShippingProfileName()
    {
        return $this->container['shipping_profile_name'];
    }

    /**
     * Sets shipping_profile_name
     *
     * @param string $shipping_profile_name The name of the shipping profile
     *
     * @return $this
     */
    public function setShippingProfileName($shipping_profile_name)
    {
        $this->container['shipping_profile_name'] = $shipping_profile_name;

        return $this;
    }

    /**
     * Gets working_days
     *
     * @return string[]
     */
    public function getWorkingDays()
    {
        return $this->container['working_days'];
    }

    /**
     * Sets working_days
     *
     * @param string[] $working_days The days of the week on which the partner is available to process orders
     *
     * @return $this
     */
    public function setWorkingDays($working_days)
    {
        $allowedValues = $this->getWorkingDaysAllowableValues();
        if (array_diff($working_days, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'working_days', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['working_days'] = $working_days;

        return $this;
    }

    /**
     * Gets order_cutoff
     *
     * @return string
     */
    public function getOrderCutoff()
    {
        return $this->container['order_cutoff'];
    }

    /**
     * Sets order_cutoff
     *
     * @param string $order_cutoff OrderCutoff specifies the time for orders to be placed, so the ProcessingTime starts within the same day. <br> This must be in half hour duration in (HH:MM) 24 hours format and in CET time.
     *
     * @return $this
     */
    public function setOrderCutoff($order_cutoff)
    {
        $this->container['order_cutoff'] = $order_cutoff;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string $delivery_type DeliveryType describes how the product is being shipped. At the moment we support the enums shown above
     *
     * @return $this
     */
    public function setDeliveryType($delivery_type)
    {
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets default_processing_time
     *
     * @return int
     */
    public function getDefaultProcessingTime()
    {
        return $this->container['default_processing_time'];
    }

    /**
     * Sets default_processing_time
     *
     * @param int $default_processing_time DefaultProcessingTime describes the time the partner needs to prepare the order for a shipment.
     *
     * @return $this
     */
    public function setDefaultProcessingTime($default_processing_time)
    {
        $this->container['default_processing_time'] = $default_processing_time;

        return $this;
    }

    /**
     * Gets transport_time
     *
     * @return int
     */
    public function getTransportTime()
    {
        return $this->container['transport_time'];
    }

    /**
     * Sets transport_time
     *
     * @param int $transport_time The time the carrier needs from collecting the order from partners warehouse till the first delivery attempt.
     *
     * @return $this
     */
    public function setTransportTime($transport_time)
    {
        $this->container['transport_time'] = $transport_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
