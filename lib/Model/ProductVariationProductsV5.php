<?php
/**
 * ProductVariationProductsV5
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * ProductVariationProductsV5 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductVariationProductsV5 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductVariation__Products-V5';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_reference' => 'string',
        'sku' => 'string',
        'ean' => 'string',
        'pzn' => 'string',
        'mpn' => 'string',
        'moin' => 'string',
        'release_date' => '\DateTime',
        'product_description' => '\cbdesk\otto\Client\Model\ProductDescriptionProductsV5',
        'media_assets' => '\cbdesk\otto\Client\Model\MediaAssetProductsV5[]',
        'order' => '\cbdesk\otto\Client\Model\OrderProductsV5',
        'pricing' => '\cbdesk\otto\Client\Model\PricingProductsV5',
        'logistics' => '\cbdesk\otto\Client\Model\LogisticsProductsV5',
        'compliance' => '\cbdesk\otto\Client\Model\ProductComplianceProductsV5'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_reference' => null,
        'sku' => null,
        'ean' => null,
        'pzn' => null,
        'mpn' => null,
        'moin' => null,
        'release_date' => 'date-time',
        'product_description' => null,
        'media_assets' => null,
        'order' => null,
        'pricing' => null,
        'logistics' => null,
        'compliance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_reference' => 'productReference',
        'sku' => 'sku',
        'ean' => 'ean',
        'pzn' => 'pzn',
        'mpn' => 'mpn',
        'moin' => 'moin',
        'release_date' => 'releaseDate',
        'product_description' => 'productDescription',
        'media_assets' => 'mediaAssets',
        'order' => 'order',
        'pricing' => 'pricing',
        'logistics' => 'logistics',
        'compliance' => 'compliance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_reference' => 'setProductReference',
        'sku' => 'setSku',
        'ean' => 'setEan',
        'pzn' => 'setPzn',
        'mpn' => 'setMpn',
        'moin' => 'setMoin',
        'release_date' => 'setReleaseDate',
        'product_description' => 'setProductDescription',
        'media_assets' => 'setMediaAssets',
        'order' => 'setOrder',
        'pricing' => 'setPricing',
        'logistics' => 'setLogistics',
        'compliance' => 'setCompliance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_reference' => 'getProductReference',
        'sku' => 'getSku',
        'ean' => 'getEan',
        'pzn' => 'getPzn',
        'mpn' => 'getMpn',
        'moin' => 'getMoin',
        'release_date' => 'getReleaseDate',
        'product_description' => 'getProductDescription',
        'media_assets' => 'getMediaAssets',
        'order' => 'getOrder',
        'pricing' => 'getPricing',
        'logistics' => 'getLogistics',
        'compliance' => 'getCompliance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_reference'] = isset($data['product_reference']) ? $data['product_reference'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['pzn'] = isset($data['pzn']) ? $data['pzn'] : null;
        $this->container['mpn'] = isset($data['mpn']) ? $data['mpn'] : null;
        $this->container['moin'] = isset($data['moin']) ? $data['moin'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['product_description'] = isset($data['product_description']) ? $data['product_description'] : null;
        $this->container['media_assets'] = isset($data['media_assets']) ? $data['media_assets'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['pricing'] = isset($data['pricing']) ? $data['pricing'] : null;
        $this->container['logistics'] = isset($data['logistics']) ? $data['logistics'] : null;
        $this->container['compliance'] = isset($data['compliance']) ? $data['compliance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_reference'] === null) {
            $invalidProperties[] = "'product_reference' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['ean'] === null) {
            $invalidProperties[] = "'ean' can't be null";
        }
        if ($this->container['product_description'] === null) {
            $invalidProperties[] = "'product_description' can't be null";
        }
        if ($this->container['media_assets'] === null) {
            $invalidProperties[] = "'media_assets' can't be null";
        }
        if ($this->container['pricing'] === null) {
            $invalidProperties[] = "'pricing' can't be null";
        }
        if ($this->container['compliance'] === null) {
            $invalidProperties[] = "'compliance' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_reference
     *
     * @return string
     */
    public function getProductReference()
    {
        return $this->container['product_reference'];
    }

    /**
     * Sets product_reference
     *
     * @param string $product_reference The productReference groups all variations, that you want to combine into one product. This is not visible to the customer. The productReference can be freely assigned and may consist of maximum 50 characters. You can only use the productReference once within your product catalog. You should therefore use a value that makes sense for all variations of the product and does not refer to any specifics of a particular variation. You will find the product reference, for example, in the product overview in the portal.
     *
     * @return $this
     */
    public function setProductReference($product_reference)
    {
        $this->container['product_reference'] = $product_reference;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Identifier for a product variation, provided by the partner, must be unique for a partner. It is mandatory, may consist of a maximum of 50 characters and must not contain leading or trailing spaces or non-printable Unicode control characters.
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean External identifier of a product, must be unique in a partner assortment, must not start with a 2.
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets pzn
     *
     * @return string
     */
    public function getPzn()
    {
        return $this->container['pzn'];
    }

    /**
     * Sets pzn
     *
     * @param string $pzn Pharmazentralnummer, a german standard for identifying pharmaceutical products.
     *
     * @return $this
     */
    public function setPzn($pzn)
    {
        $this->container['pzn'] = $pzn;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string $mpn Manufacturer part number, may consist of a maximum of 50 characters.
     *
     * @return $this
     */
    public function setMpn($mpn)
    {
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets moin
     *
     * @return string
     */
    public function getMoin()
    {
        return $this->container['moin'];
    }

    /**
     * Sets moin
     *
     * @param string $moin Is an identifier, generated by the OTTO marketplace, for a product variation together with the associated content. Is used in the context of \"Wettbewerb am Artikel\" to confirm the content of the existing variation and its correctness and to put the own offer live for this variation.
     *
     * @return $this
     */
    public function setMoin($moin)
    {
        $this->container['moin'] = $moin;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return \DateTime
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param \DateTime $release_date ISO8601 Date (e.g. 2024-08-01T08:00:00+0100) on which the product is released by the manufacturer, e.g. computer games.
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return \cbdesk\otto\Client\Model\ProductDescriptionProductsV5
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param \cbdesk\otto\Client\Model\ProductDescriptionProductsV5 $product_description product_description
     *
     * @return $this
     */
    public function setProductDescription($product_description)
    {
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets media_assets
     *
     * @return \cbdesk\otto\Client\Model\MediaAssetProductsV5[]
     */
    public function getMediaAssets()
    {
        return $this->container['media_assets'];
    }

    /**
     * Sets media_assets
     *
     * @param \cbdesk\otto\Client\Model\MediaAssetProductsV5[] $media_assets A list of media assets describing this product variation. Currently these may only be static images of the types JPG or PNG with a RGB color space. Furthermore the images have to have a minimum size of 500 x 1000 pixel and a maximum width of 4500 pixel.
     *
     * @return $this
     */
    public function setMediaAssets($media_assets)
    {
        $this->container['media_assets'] = $media_assets;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \cbdesk\otto\Client\Model\OrderProductsV5
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \cbdesk\otto\Client\Model\OrderProductsV5 $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \cbdesk\otto\Client\Model\PricingProductsV5
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \cbdesk\otto\Client\Model\PricingProductsV5 $pricing pricing
     *
     * @return $this
     */
    public function setPricing($pricing)
    {
        $this->container['pricing'] = $pricing;

        return $this;
    }

    /**
     * Gets logistics
     *
     * @return \cbdesk\otto\Client\Model\LogisticsProductsV5
     */
    public function getLogistics()
    {
        return $this->container['logistics'];
    }

    /**
     * Sets logistics
     *
     * @param \cbdesk\otto\Client\Model\LogisticsProductsV5 $logistics logistics
     *
     * @return $this
     */
    public function setLogistics($logistics)
    {
        $this->container['logistics'] = $logistics;

        return $this;
    }

    /**
     * Gets compliance
     *
     * @return \cbdesk\otto\Client\Model\ProductComplianceProductsV5
     */
    public function getCompliance()
    {
        return $this->container['compliance'];
    }

    /**
     * Sets compliance
     *
     * @param \cbdesk\otto\Client\Model\ProductComplianceProductsV5 $compliance compliance
     *
     * @return $this
     */
    public function setCompliance($compliance)
    {
        $this->container['compliance'] = $compliance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
