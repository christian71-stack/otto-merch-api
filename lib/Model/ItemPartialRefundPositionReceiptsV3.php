<?php
/**
 * ItemPartialRefundPositionReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * ItemPartialRefundPositionReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description List of billed partial refunds of items. &lt;/br&gt;This list is only used in context of receiptType PARTIAL_REFUND. &lt;/br&gt;If there are no entries the lists is displayed as empty
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemPartialRefundPositionReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemPartialRefundPosition__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'partial_refund_details' => '\cbdesk\otto\Client\Model\PartialRefundDetailsReceiptsV3',
        'line_number' => 'int',
        'sku' => 'string',
        'article_number' => 'string',
        'product_title' => 'string',
        'variation_attributes' => 'string',
        'position_item_ids' => 'string[]',
        'partial_refund_amount' => '\cbdesk\otto\Client\Model\PriceReceiptsV3'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'partial_refund_details' => null,
        'line_number' => 'int32',
        'sku' => null,
        'article_number' => null,
        'product_title' => null,
        'variation_attributes' => null,
        'position_item_ids' => null,
        'partial_refund_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partial_refund_details' => 'partialRefundDetails',
        'line_number' => 'lineNumber',
        'sku' => 'sku',
        'article_number' => 'articleNumber',
        'product_title' => 'productTitle',
        'variation_attributes' => 'variationAttributes',
        'position_item_ids' => 'positionItemIds',
        'partial_refund_amount' => 'partialRefundAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partial_refund_details' => 'setPartialRefundDetails',
        'line_number' => 'setLineNumber',
        'sku' => 'setSku',
        'article_number' => 'setArticleNumber',
        'product_title' => 'setProductTitle',
        'variation_attributes' => 'setVariationAttributes',
        'position_item_ids' => 'setPositionItemIds',
        'partial_refund_amount' => 'setPartialRefundAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partial_refund_details' => 'getPartialRefundDetails',
        'line_number' => 'getLineNumber',
        'sku' => 'getSku',
        'article_number' => 'getArticleNumber',
        'product_title' => 'getProductTitle',
        'variation_attributes' => 'getVariationAttributes',
        'position_item_ids' => 'getPositionItemIds',
        'partial_refund_amount' => 'getPartialRefundAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partial_refund_details'] = isset($data['partial_refund_details']) ? $data['partial_refund_details'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['article_number'] = isset($data['article_number']) ? $data['article_number'] : null;
        $this->container['product_title'] = isset($data['product_title']) ? $data['product_title'] : null;
        $this->container['variation_attributes'] = isset($data['variation_attributes']) ? $data['variation_attributes'] : null;
        $this->container['position_item_ids'] = isset($data['position_item_ids']) ? $data['position_item_ids'] : null;
        $this->container['partial_refund_amount'] = isset($data['partial_refund_amount']) ? $data['partial_refund_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['article_number'] === null) {
            $invalidProperties[] = "'article_number' can't be null";
        }
        if ($this->container['product_title'] === null) {
            $invalidProperties[] = "'product_title' can't be null";
        }
        if ($this->container['position_item_ids'] === null) {
            $invalidProperties[] = "'position_item_ids' can't be null";
        }
        if ($this->container['partial_refund_amount'] === null) {
            $invalidProperties[] = "'partial_refund_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets partial_refund_details
     *
     * @return \cbdesk\otto\Client\Model\PartialRefundDetailsReceiptsV3
     */
    public function getPartialRefundDetails()
    {
        return $this->container['partial_refund_details'];
    }

    /**
     * Sets partial_refund_details
     *
     * @param \cbdesk\otto\Client\Model\PartialRefundDetailsReceiptsV3 $partial_refund_details partial_refund_details
     *
     * @return $this
     */
    public function setPartialRefundDetails($partial_refund_details)
    {
        $this->container['partial_refund_details'] = $partial_refund_details;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number Number of line item in which the information is printed on the pdf document of the receipt. </br>This information is not reliably provided for older receipts
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Stock keeping unit of  item. Unique item identifier on partner side
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string $article_number Unique Identifier of item the customer knows from order process
     *
     * @return $this
     */
    public function setArticleNumber($article_number)
    {
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets product_title
     *
     * @return string
     */
    public function getProductTitle()
    {
        return $this->container['product_title'];
    }

    /**
     * Sets product_title
     *
     * @param string $product_title Product description of item the customer knows from the order process
     *
     * @return $this
     */
    public function setProductTitle($product_title)
    {
        $this->container['product_title'] = $product_title;

        return $this;
    }

    /**
     * Gets variation_attributes
     *
     * @return string
     */
    public function getVariationAttributes()
    {
        return $this->container['variation_attributes'];
    }

    /**
     * Sets variation_attributes
     *
     * @param string $variation_attributes Additional attributes for unique description of  item, if different variants of the item are possible. (String of comma seperated dimensions)  ATTENTION: In previous version, the information exists as dimensions
     *
     * @return $this
     */
    public function setVariationAttributes($variation_attributes)
    {
        $this->container['variation_attributes'] = $variation_attributes;

        return $this;
    }

    /**
     * Gets position_item_ids
     *
     * @return string[]
     */
    public function getPositionItemIds()
    {
        return $this->container['position_item_ids'];
    }

    /**
     * Sets position_item_ids
     *
     * @param string[] $position_item_ids List of unique identifiers of specific instances of ordered items. </br>A (salesOrder)PositionItem is the smallest unit of an item that can be ordered
     *
     * @return $this
     */
    public function setPositionItemIds($position_item_ids)
    {
        $this->container['position_item_ids'] = $position_item_ids;

        return $this;
    }

    /**
     * Gets partial_refund_amount
     *
     * @return \cbdesk\otto\Client\Model\PriceReceiptsV3
     */
    public function getPartialRefundAmount()
    {
        return $this->container['partial_refund_amount'];
    }

    /**
     * Sets partial_refund_amount
     *
     * @param \cbdesk\otto\Client\Model\PriceReceiptsV3 $partial_refund_amount partial_refund_amount
     *
     * @return $this
     */
    public function setPartialRefundAmount($partial_refund_amount)
    {
        $this->container['partial_refund_amount'] = $partial_refund_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
