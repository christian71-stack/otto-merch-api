<?php
/**
 * PaymentReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * PaymentReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Payment details
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Payment__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_provider' => 'string',
        'payment_method' => 'string',
        'installment_count' => 'int',
        'payment_break' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_provider' => null,
        'payment_method' => null,
        'installment_count' => 'int32',
        'payment_break' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_provider' => 'paymentProvider',
        'payment_method' => 'paymentMethod',
        'installment_count' => 'installmentCount',
        'payment_break' => 'paymentBreak'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_provider' => 'setPaymentProvider',
        'payment_method' => 'setPaymentMethod',
        'installment_count' => 'setInstallmentCount',
        'payment_break' => 'setPaymentBreak'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_provider' => 'getPaymentProvider',
        'payment_method' => 'getPaymentMethod',
        'installment_count' => 'getInstallmentCount',
        'payment_break' => 'getPaymentBreak'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_PROVIDER_PLAZA = 'PLAZA';
    const PAYMENT_PROVIDER_OTTOPAYMENTS = 'OTTOPAYMENTS';
    const PAYMENT_METHOD_CREDIT_CARD_ONLINE = 'CREDIT_CARD_ONLINE';
    const PAYMENT_METHOD_INVOICE_SINGLE = 'INVOICE_SINGLE';
    const PAYMENT_METHOD_INVOICE_INSTALLMENTS = 'INVOICE_INSTALLMENTS';
    const PAYMENT_METHOD_DIRECT_DEBIT_INSTALLMENTS = 'DIRECT_DEBIT_INSTALLMENTS';
    const PAYMENT_METHOD_PREPAYMENT = 'PREPAYMENT';
    const PAYMENT_METHOD_PAYPAL = 'PAYPAL';
    const PAYMENT_METHOD_DIRECT_DEBIT = 'DIRECT_DEBIT';
    const PAYMENT_METHOD_CREDIT_CARD = 'CREDIT_CARD';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentProviderAllowableValues()
    {
        return [
            self::PAYMENT_PROVIDER_PLAZA,
            self::PAYMENT_PROVIDER_OTTOPAYMENTS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_CREDIT_CARD_ONLINE,
            self::PAYMENT_METHOD_INVOICE_SINGLE,
            self::PAYMENT_METHOD_INVOICE_INSTALLMENTS,
            self::PAYMENT_METHOD_DIRECT_DEBIT_INSTALLMENTS,
            self::PAYMENT_METHOD_PREPAYMENT,
            self::PAYMENT_METHOD_PAYPAL,
            self::PAYMENT_METHOD_DIRECT_DEBIT,
            self::PAYMENT_METHOD_CREDIT_CARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_provider'] = isset($data['payment_provider']) ? $data['payment_provider'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['installment_count'] = isset($data['installment_count']) ? $data['installment_count'] : null;
        $this->container['payment_break'] = isset($data['payment_break']) ? $data['payment_break'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_provider'] === null) {
            $invalidProperties[] = "'payment_provider' can't be null";
        }
        $allowedValues = $this->getPaymentProviderAllowableValues();
        if (!is_null($this->container['payment_provider']) && !in_array($this->container['payment_provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_provider', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_method'] === null) {
            $invalidProperties[] = "'payment_method' can't be null";
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_provider
     *
     * @return string
     */
    public function getPaymentProvider()
    {
        return $this->container['payment_provider'];
    }

    /**
     * Sets payment_provider
     *
     * @param string $payment_provider Payment Provider chosen for the order. </br> Possible values: * **PLAZA** -  Ratepay * **OTTOPAYMENTS** - OTTO Payments
     *
     * @return $this
     */
    public function setPaymentProvider($payment_provider)
    {
        $allowedValues = $this->getPaymentProviderAllowableValues();
        if (!in_array($payment_provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_provider', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_provider'] = $payment_provider;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Payment method chosen by the customer to pay for this order.  Possible values: * **INVOICE_SINGLE / INVOICE_INSTALLMENT** - payment on invoice (with or without installments) * **DIRECT_DEBIT / DIRECT_DEBIT_INSTALLMENTS** - payment by direct debit (with or without installments) * **PREPAYMENT** - payment by prepayment * **PAYPAL** - payment by PayPal * **CREDIT_CARD** - payment by credit or debit card  (only applicable for paymentProvider = OTTOPAYMENTS) * **CREDIT_CARD_ONLINE** - payment by credit card  (only applicable for old paymentProvider = PLAZA)
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets installment_count
     *
     * @return int
     */
    public function getInstallmentCount()
    {
        return $this->container['installment_count'];
    }

    /**
     * Sets installment_count
     *
     * @param int $installment_count For payment methods with installments, this attribute indicates how many installments the customer has chosen when placing the order. </br>Only available on receipts of receiptType PURCHASE. </br>This information is not reliably provided for older receipts
     *
     * @return $this
     */
    public function setInstallmentCount($installment_count)
    {
        $this->container['installment_count'] = $installment_count;

        return $this;
    }

    /**
     * Gets payment_break
     *
     * @return bool
     */
    public function getPaymentBreak()
    {
        return $this->container['payment_break'];
    }

    /**
     * Sets payment_break
     *
     * @param bool $payment_break The field indicates whether customer has chosen paymentBreak <ul><li>Set to <b>true</b>, if customer has chose paymentBreak</li><li>Set to <b>false</b>, if customer hasn’t chosen paymentBreak</li></ul>
     *
     * @return $this
     */
    public function setPaymentBreak($payment_break)
    {
        $this->container['payment_break'] = $payment_break;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
