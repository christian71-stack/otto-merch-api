<?php
/**
 * PartnerReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * PartnerReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Partner for whom the receipt is created
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PartnerReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Partner__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'partner_name' => 'string',
        'street' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'vat_id' => 'string',
        'represented_by' => 'string',
        'register_court' => 'string',
        'commercial_register_number' => 'string',
        'head_of_supervisory_board' => 'string',
        'shop_name' => 'string',
        'weee_registration_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'partner_name' => null,
        'street' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null,
        'vat_id' => null,
        'represented_by' => null,
        'register_court' => null,
        'commercial_register_number' => null,
        'head_of_supervisory_board' => null,
        'shop_name' => null,
        'weee_registration_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partner_name' => 'partnerName',
        'street' => 'street',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'vat_id' => 'vatId',
        'represented_by' => 'representedBy',
        'register_court' => 'registerCourt',
        'commercial_register_number' => 'commercialRegisterNumber',
        'head_of_supervisory_board' => 'headOfSupervisoryBoard',
        'shop_name' => 'shopName',
        'weee_registration_number' => 'weeeRegistrationNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partner_name' => 'setPartnerName',
        'street' => 'setStreet',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'vat_id' => 'setVatId',
        'represented_by' => 'setRepresentedBy',
        'register_court' => 'setRegisterCourt',
        'commercial_register_number' => 'setCommercialRegisterNumber',
        'head_of_supervisory_board' => 'setHeadOfSupervisoryBoard',
        'shop_name' => 'setShopName',
        'weee_registration_number' => 'setWeeeRegistrationNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partner_name' => 'getPartnerName',
        'street' => 'getStreet',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'vat_id' => 'getVatId',
        'represented_by' => 'getRepresentedBy',
        'register_court' => 'getRegisterCourt',
        'commercial_register_number' => 'getCommercialRegisterNumber',
        'head_of_supervisory_board' => 'getHeadOfSupervisoryBoard',
        'shop_name' => 'getShopName',
        'weee_registration_number' => 'getWeeeRegistrationNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partner_name'] = isset($data['partner_name']) ? $data['partner_name'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['vat_id'] = isset($data['vat_id']) ? $data['vat_id'] : null;
        $this->container['represented_by'] = isset($data['represented_by']) ? $data['represented_by'] : null;
        $this->container['register_court'] = isset($data['register_court']) ? $data['register_court'] : null;
        $this->container['commercial_register_number'] = isset($data['commercial_register_number']) ? $data['commercial_register_number'] : null;
        $this->container['head_of_supervisory_board'] = isset($data['head_of_supervisory_board']) ? $data['head_of_supervisory_board'] : null;
        $this->container['shop_name'] = isset($data['shop_name']) ? $data['shop_name'] : null;
        $this->container['weee_registration_number'] = isset($data['weee_registration_number']) ? $data['weee_registration_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['partner_name'] === null) {
            $invalidProperties[] = "'partner_name' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ($this->container['zip_code'] === null) {
            $invalidProperties[] = "'zip_code' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ($this->container['vat_id'] === null) {
            $invalidProperties[] = "'vat_id' can't be null";
        }
        if ($this->container['represented_by'] === null) {
            $invalidProperties[] = "'represented_by' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets partner_name
     *
     * @return string
     */
    public function getPartnerName()
    {
        return $this->container['partner_name'];
    }

    /**
     * Sets partner_name
     *
     * @param string $partner_name Name of the selling partner/company.  ATTENTION: In previous version the information was called name
     *
     * @return $this
     */
    public function setPartnerName($partner_name)
    {
        $this->container['partner_name'] = $partner_name;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Street and house number of company address
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code Zip code of company address
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City of company address
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country of company address represented as country code (ISO 3166-1 alpha-3)
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string $vat_id Value added tax identification number of partner
     *
     * @return $this
     */
    public function setVatId($vat_id)
    {
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets represented_by
     *
     * @return string
     */
    public function getRepresentedBy()
    {
        return $this->container['represented_by'];
    }

    /**
     * Sets represented_by
     *
     * @param string $represented_by The partner's representative(s).  ATTENTION: In previous version the information was called legalRepresentatives
     *
     * @return $this
     */
    public function setRepresentedBy($represented_by)
    {
        $this->container['represented_by'] = $represented_by;

        return $this;
    }

    /**
     * Gets register_court
     *
     * @return string
     */
    public function getRegisterCourt()
    {
        return $this->container['register_court'];
    }

    /**
     * Sets register_court
     *
     * @param string $register_court Court where the company is registered.</br> Information exists if it's maintained in partner core data.  ATTENTION: In previous version the information was called districtCourt
     *
     * @return $this
     */
    public function setRegisterCourt($register_court)
    {
        $this->container['register_court'] = $register_court;

        return $this;
    }

    /**
     * Gets commercial_register_number
     *
     * @return string
     */
    public function getCommercialRegisterNumber()
    {
        return $this->container['commercial_register_number'];
    }

    /**
     * Sets commercial_register_number
     *
     * @param string $commercial_register_number Commercial register number. Unique in context of register court.</br> Information exists if it's maintained in partner core data.  ATTENTION: In previous version the information was called registerNumber
     *
     * @return $this
     */
    public function setCommercialRegisterNumber($commercial_register_number)
    {
        $this->container['commercial_register_number'] = $commercial_register_number;

        return $this;
    }

    /**
     * Gets head_of_supervisory_board
     *
     * @return string
     */
    public function getHeadOfSupervisoryBoard()
    {
        return $this->container['head_of_supervisory_board'];
    }

    /**
     * Sets head_of_supervisory_board
     *
     * @param string $head_of_supervisory_board The partner's head of supervisory board.</br> Information exists if it's maintained in partner core data
     *
     * @return $this
     */
    public function setHeadOfSupervisoryBoard($head_of_supervisory_board)
    {
        $this->container['head_of_supervisory_board'] = $head_of_supervisory_board;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string
     */
    public function getShopName()
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string $shop_name Alias name of partner.</br> Information exists if it's maintained in partner core data
     *
     * @return $this
     */
    public function setShopName($shop_name)
    {
        $this->container['shop_name'] = $shop_name;

        return $this;
    }

    /**
     * Gets weee_registration_number
     *
     * @return string
     */
    public function getWeeeRegistrationNumber()
    {
        return $this->container['weee_registration_number'];
    }

    /**
     * Sets weee_registration_number
     *
     * @param string $weee_registration_number WEEE registration number of partner.</br> Information exists if it's maintained in partner core data
     *
     * @return $this
     */
    public function setWeeeRegistrationNumber($weee_registration_number)
    {
        $this->container['weee_registration_number'] = $weee_registration_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
