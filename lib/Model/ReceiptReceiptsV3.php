<?php
/**
 * ReceiptReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * ReceiptReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Collection of all details of a receipt
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReceiptReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Receipt__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receipt_type' => 'string',
        'is_real_receipt' => 'bool',
        'receipt_number' => 'string',
        'creation_date' => '\DateTime',
        'fulfillment_date' => '\DateTime',
        'sales_order_id' => 'string',
        'order_number' => 'string',
        'order_date' => '\DateTime',
        'shipment_date' => '\DateTime',
        'shipment' => '\cbdesk\otto\Client\Model\ShipmentReceiptsV3',
        'linked_receipt_number' => 'string',
        'linked_creation_date' => '\DateTime',
        'payment' => '\cbdesk\otto\Client\Model\PaymentReceiptsV3',
        'partner' => '\cbdesk\otto\Client\Model\PartnerReceiptsV3',
        'customer' => '\cbdesk\otto\Client\Model\CustomerReceiptsV3',
        'delivery_address' => '\cbdesk\otto\Client\Model\AddressReceiptsV3',
        'line_items' => '\cbdesk\otto\Client\Model\LineItemsReceiptsV3',
        'totals' => '\cbdesk\otto\Client\Model\PriceReceiptsV3[]',
        'refund_type' => 'string',
        'partial_refund_type' => 'string',
        'amount_due' => 'AllOfReceiptReceiptsV3AmountDue',
        'totals_gross_amount' => 'AllOfReceiptReceiptsV3TotalsGrossAmount',
        'totals_reductions' => '\cbdesk\otto\Client\Model\TotalsReductionReceiptsV3[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receipt_type' => null,
        'is_real_receipt' => null,
        'receipt_number' => null,
        'creation_date' => 'date-time',
        'fulfillment_date' => 'date-time',
        'sales_order_id' => null,
        'order_number' => null,
        'order_date' => 'date-time',
        'shipment_date' => 'date-time',
        'shipment' => null,
        'linked_receipt_number' => null,
        'linked_creation_date' => 'date-time',
        'payment' => null,
        'partner' => null,
        'customer' => null,
        'delivery_address' => null,
        'line_items' => null,
        'totals' => null,
        'refund_type' => null,
        'partial_refund_type' => null,
        'amount_due' => null,
        'totals_gross_amount' => null,
        'totals_reductions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receipt_type' => 'receiptType',
        'is_real_receipt' => 'isRealReceipt',
        'receipt_number' => 'receiptNumber',
        'creation_date' => 'creationDate',
        'fulfillment_date' => 'fulfillmentDate',
        'sales_order_id' => 'salesOrderId',
        'order_number' => 'orderNumber',
        'order_date' => 'orderDate',
        'shipment_date' => 'shipmentDate',
        'shipment' => 'shipment',
        'linked_receipt_number' => 'linkedReceiptNumber',
        'linked_creation_date' => 'linkedCreationDate',
        'payment' => 'payment',
        'partner' => 'partner',
        'customer' => 'customer',
        'delivery_address' => 'deliveryAddress',
        'line_items' => 'lineItems',
        'totals' => 'totals',
        'refund_type' => 'refundType',
        'partial_refund_type' => 'partialRefundType',
        'amount_due' => 'amountDue',
        'totals_gross_amount' => 'totalsGrossAmount',
        'totals_reductions' => 'totalsReductions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receipt_type' => 'setReceiptType',
        'is_real_receipt' => 'setIsRealReceipt',
        'receipt_number' => 'setReceiptNumber',
        'creation_date' => 'setCreationDate',
        'fulfillment_date' => 'setFulfillmentDate',
        'sales_order_id' => 'setSalesOrderId',
        'order_number' => 'setOrderNumber',
        'order_date' => 'setOrderDate',
        'shipment_date' => 'setShipmentDate',
        'shipment' => 'setShipment',
        'linked_receipt_number' => 'setLinkedReceiptNumber',
        'linked_creation_date' => 'setLinkedCreationDate',
        'payment' => 'setPayment',
        'partner' => 'setPartner',
        'customer' => 'setCustomer',
        'delivery_address' => 'setDeliveryAddress',
        'line_items' => 'setLineItems',
        'totals' => 'setTotals',
        'refund_type' => 'setRefundType',
        'partial_refund_type' => 'setPartialRefundType',
        'amount_due' => 'setAmountDue',
        'totals_gross_amount' => 'setTotalsGrossAmount',
        'totals_reductions' => 'setTotalsReductions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receipt_type' => 'getReceiptType',
        'is_real_receipt' => 'getIsRealReceipt',
        'receipt_number' => 'getReceiptNumber',
        'creation_date' => 'getCreationDate',
        'fulfillment_date' => 'getFulfillmentDate',
        'sales_order_id' => 'getSalesOrderId',
        'order_number' => 'getOrderNumber',
        'order_date' => 'getOrderDate',
        'shipment_date' => 'getShipmentDate',
        'shipment' => 'getShipment',
        'linked_receipt_number' => 'getLinkedReceiptNumber',
        'linked_creation_date' => 'getLinkedCreationDate',
        'payment' => 'getPayment',
        'partner' => 'getPartner',
        'customer' => 'getCustomer',
        'delivery_address' => 'getDeliveryAddress',
        'line_items' => 'getLineItems',
        'totals' => 'getTotals',
        'refund_type' => 'getRefundType',
        'partial_refund_type' => 'getPartialRefundType',
        'amount_due' => 'getAmountDue',
        'totals_gross_amount' => 'getTotalsGrossAmount',
        'totals_reductions' => 'getTotalsReductions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RECEIPT_TYPE_PURCHASE = 'PURCHASE';
    const RECEIPT_TYPE_REFUND = 'REFUND';
    const RECEIPT_TYPE_PARTIAL_REFUND = 'PARTIAL_REFUND';
    const REFUND_TYPE__RETURN = 'RETURN';
    const REFUND_TYPE_CANCELLATION = 'CANCELLATION';
    const REFUND_TYPE_SERVICE_FULL_REFUND_CANCELLED_BY_SDU = 'SERVICE_FULL_REFUND_CANCELLED_BY_SDU';
    const REFUND_TYPE_SERVICE_FULL_REFUND_PRODUCT_RETURNED = 'SERVICE_FULL_REFUND_PRODUCT_RETURNED';
    const PARTIAL_REFUND_TYPE_COMPLAINT_ITEM = 'REFUND_COMPLAINT_ITEM';
    const PARTIAL_REFUND_TYPE_PAYPAL_DISPUTE = 'REFUND_PAYPAL_DISPUTE';
    const PARTIAL_REFUND_TYPE_ESCALATION = 'REFUND_ESCALATION';
    const PARTIAL_REFUND_TYPE_PARTIAL_AMOUNT_AFTER_SERVICE_CANCELLATION = 'REFUND_PARTIAL_AMOUNT_AFTER_SERVICE_CANCELLATION';
    const PARTIAL_REFUND_TYPE_CREDIT_CARD_DISPUTE = 'REFUND_CREDIT_CARD_DISPUTE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiptTypeAllowableValues()
    {
        return [
            self::RECEIPT_TYPE_PURCHASE,
            self::RECEIPT_TYPE_REFUND,
            self::RECEIPT_TYPE_PARTIAL_REFUND,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRefundTypeAllowableValues()
    {
        return [
            self::REFUND_TYPE__RETURN,
            self::REFUND_TYPE_CANCELLATION,
            self::REFUND_TYPE_SERVICE_FULL_REFUND_CANCELLED_BY_SDU,
            self::REFUND_TYPE_SERVICE_FULL_REFUND_PRODUCT_RETURNED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartialRefundTypeAllowableValues()
    {
        return [
            self::PARTIAL_REFUND_TYPE_COMPLAINT_ITEM,
            self::PARTIAL_REFUND_TYPE_PAYPAL_DISPUTE,
            self::PARTIAL_REFUND_TYPE_ESCALATION,
            self::PARTIAL_REFUND_TYPE_PARTIAL_AMOUNT_AFTER_SERVICE_CANCELLATION,
            self::PARTIAL_REFUND_TYPE_CREDIT_CARD_DISPUTE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receipt_type'] = isset($data['receipt_type']) ? $data['receipt_type'] : null;
        $this->container['is_real_receipt'] = isset($data['is_real_receipt']) ? $data['is_real_receipt'] : null;
        $this->container['receipt_number'] = isset($data['receipt_number']) ? $data['receipt_number'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['fulfillment_date'] = isset($data['fulfillment_date']) ? $data['fulfillment_date'] : null;
        $this->container['sales_order_id'] = isset($data['sales_order_id']) ? $data['sales_order_id'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['shipment_date'] = isset($data['shipment_date']) ? $data['shipment_date'] : null;
        $this->container['shipment'] = isset($data['shipment']) ? $data['shipment'] : null;
        $this->container['linked_receipt_number'] = isset($data['linked_receipt_number']) ? $data['linked_receipt_number'] : null;
        $this->container['linked_creation_date'] = isset($data['linked_creation_date']) ? $data['linked_creation_date'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['totals'] = isset($data['totals']) ? $data['totals'] : null;
        $this->container['refund_type'] = isset($data['refund_type']) ? $data['refund_type'] : null;
        $this->container['partial_refund_type'] = isset($data['partial_refund_type']) ? $data['partial_refund_type'] : null;
        $this->container['amount_due'] = isset($data['amount_due']) ? $data['amount_due'] : null;
        $this->container['totals_gross_amount'] = isset($data['totals_gross_amount']) ? $data['totals_gross_amount'] : null;
        $this->container['totals_reductions'] = isset($data['totals_reductions']) ? $data['totals_reductions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['receipt_type'] === null) {
            $invalidProperties[] = "'receipt_type' can't be null";
        }
        $allowedValues = $this->getReceiptTypeAllowableValues();
        if (!is_null($this->container['receipt_type']) && !in_array($this->container['receipt_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'receipt_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['is_real_receipt'] === null) {
            $invalidProperties[] = "'is_real_receipt' can't be null";
        }
        if ($this->container['receipt_number'] === null) {
            $invalidProperties[] = "'receipt_number' can't be null";
        }
        if ($this->container['creation_date'] === null) {
            $invalidProperties[] = "'creation_date' can't be null";
        }
        if ($this->container['sales_order_id'] === null) {
            $invalidProperties[] = "'sales_order_id' can't be null";
        }
        if ($this->container['order_number'] === null) {
            $invalidProperties[] = "'order_number' can't be null";
        }
        if ($this->container['order_date'] === null) {
            $invalidProperties[] = "'order_date' can't be null";
        }
        if ($this->container['payment'] === null) {
            $invalidProperties[] = "'payment' can't be null";
        }
        if ($this->container['partner'] === null) {
            $invalidProperties[] = "'partner' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['line_items'] === null) {
            $invalidProperties[] = "'line_items' can't be null";
        }
        if ($this->container['totals'] === null) {
            $invalidProperties[] = "'totals' can't be null";
        }
        $allowedValues = $this->getRefundTypeAllowableValues();
        if (!is_null($this->container['refund_type']) && !in_array($this->container['refund_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'refund_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPartialRefundTypeAllowableValues();
        if (!is_null($this->container['partial_refund_type']) && !in_array($this->container['partial_refund_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'partial_refund_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount_due'] === null) {
            $invalidProperties[] = "'amount_due' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receipt_type
     *
     * @return string
     */
    public function getReceiptType()
    {
        return $this->container['receipt_type'];
    }

    /**
     * Sets receipt_type
     *
     * @param string $receipt_type Categorisation that classifies the receipts according to the main characteristics  ATTENTION: In previous version the information was called type
     *
     * @return $this
     */
    public function setReceiptType($receipt_type)
    {
        $allowedValues = $this->getReceiptTypeAllowableValues();
        if (!in_array($receipt_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'receipt_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receipt_type'] = $receipt_type;

        return $this;
    }

    /**
     * Gets is_real_receipt
     *
     * @return bool
     */
    public function getIsRealReceipt()
    {
        return $this->container['is_real_receipt'];
    }

    /**
     * Sets is_real_receipt
     *
     * @param bool $is_real_receipt Counterpart to the sentence \"Dies ist kein Beleg/keine Rechnung im Sinne des Umsatzsteuergesetzes und berechtigt nicht zum Vorsteuerabzug.\" on pdf document.    * Set to **true** since real customer invoices/refunds for shipments to locations in domestic tax territory are created.    * Set to **false** for technical receipts not visible to customer or on receipts with delivery addresses on Helgoland or in Büsingen
     *
     * @return $this
     */
    public function setIsRealReceipt($is_real_receipt)
    {
        $this->container['is_real_receipt'] = $is_real_receipt;

        return $this;
    }

    /**
     * Gets receipt_number
     *
     * @return string
     */
    public function getReceiptNumber()
    {
        return $this->container['receipt_number'];
    }

    /**
     * Sets receipt_number
     *
     * @param string $receipt_number Human readable identifier of a receipt known by customer. </br> Guaranteed to be unique per partner
     *
     * @return $this
     */
    public function setReceiptNumber($receipt_number)
    {
        $this->container['receipt_number'] = $receipt_number;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Date when receipt is created by system (UTC in ISO-8601 format)
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets fulfillment_date
     *
     * @return \DateTime
     */
    public function getFulfillmentDate()
    {
        return $this->container['fulfillment_date'];
    }

    /**
     * Sets fulfillment_date
     *
     * @param \DateTime $fulfillment_date Date when service fulfilled.
     *
     * @return $this
     */
    public function setFulfillmentDate($fulfillment_date)
    {
        $this->container['fulfillment_date'] = $fulfillment_date;

        return $this;
    }

    /**
     * Gets sales_order_id
     *
     * @return string
     */
    public function getSalesOrderId()
    {
        return $this->container['sales_order_id'];
    }

    /**
     * Sets sales_order_id
     *
     * @param string $sales_order_id Technical identifier of corresponding sales order
     *
     * @return $this
     */
    public function setSalesOrderId($sales_order_id)
    {
        $this->container['sales_order_id'] = $sales_order_id;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number Order number of corresponding sales order
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date Order date of corresponding sales order (UTC in ISO-8601 format)
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets shipment_date
     *
     * @return \DateTime
     */
    public function getShipmentDate()
    {
        return $this->container['shipment_date'];
    }

    /**
     * Sets shipment_date
     *
     * @param \DateTime $shipment_date Date when physical items of this receipt were handed over to the carrier to be delivered to the customer (UTC in ISO-8601 format).</br>Only available on receipts of receiptType PURCHASE.
     *
     * @return $this
     */
    public function setShipmentDate($shipment_date)
    {
        $this->container['shipment_date'] = $shipment_date;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \cbdesk\otto\Client\Model\ShipmentReceiptsV3
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param \cbdesk\otto\Client\Model\ShipmentReceiptsV3 $shipment shipment
     *
     * @return $this
     */
    public function setShipment($shipment)
    {
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets linked_receipt_number
     *
     * @return string
     */
    public function getLinkedReceiptNumber()
    {
        return $this->container['linked_receipt_number'];
    }

    /**
     * Sets linked_receipt_number
     *
     * @param string $linked_receipt_number Human-readable identifier of linked receipt.</br> In case of receiptType PARTIAL_REFUND or REFUND it is the receiptINumber of purchase receipt.  ATTENTION: In previous version the information was called originalReceiptNumber
     *
     * @return $this
     */
    public function setLinkedReceiptNumber($linked_receipt_number)
    {
        $this->container['linked_receipt_number'] = $linked_receipt_number;

        return $this;
    }

    /**
     * Gets linked_creation_date
     *
     * @return \DateTime
     */
    public function getLinkedCreationDate()
    {
        return $this->container['linked_creation_date'];
    }

    /**
     * Sets linked_creation_date
     *
     * @param \DateTime $linked_creation_date Creation date of linked receipt (UTC in ISO-8601 format).</br>Only available if there is a linked receipt.  ATTENTION: In previous version the information was called originalCreatedDate
     *
     * @return $this
     */
    public function setLinkedCreationDate($linked_creation_date)
    {
        $this->container['linked_creation_date'] = $linked_creation_date;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \cbdesk\otto\Client\Model\PaymentReceiptsV3
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \cbdesk\otto\Client\Model\PaymentReceiptsV3 $payment payment
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return \cbdesk\otto\Client\Model\PartnerReceiptsV3
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param \cbdesk\otto\Client\Model\PartnerReceiptsV3 $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \cbdesk\otto\Client\Model\CustomerReceiptsV3
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \cbdesk\otto\Client\Model\CustomerReceiptsV3 $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \cbdesk\otto\Client\Model\AddressReceiptsV3
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \cbdesk\otto\Client\Model\AddressReceiptsV3 $delivery_address delivery_address
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \cbdesk\otto\Client\Model\LineItemsReceiptsV3
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \cbdesk\otto\Client\Model\LineItemsReceiptsV3 $line_items line_items
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \cbdesk\otto\Client\Model\PriceReceiptsV3[]
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \cbdesk\otto\Client\Model\PriceReceiptsV3[] $totals Total amounts of receipt per tax type and tax rate
     *
     * @return $this
     */
    public function setTotals($totals)
    {
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets refund_type
     *
     * @return string
     */
    public function getRefundType()
    {
        return $this->container['refund_type'];
    }

    /**
     * Sets refund_type
     *
     * @param string $refund_type Field describes the business case of a refund in more detail.    <br/>Only available on receipts of receiptType REFUND and not reliable provided on older partial refund receipts.    The following refundTypes are possible:   * **RETURN** - Refund due to a return of an item   * **CANCELLATION** - Refund of delivery fees due to a cancellation   * **SERVICE_FULL_REFUND_CANCELLED_BY_SDU** - Refund of a service without item   * **SERVICE_FULL_REFUND_PRODUCT_RETURNED** - Refund a service parallel to an item return
     *
     * @return $this
     */
    public function setRefundType($refund_type)
    {
        $allowedValues = $this->getRefundTypeAllowableValues();
        if (!is_null($refund_type) && !in_array($refund_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'refund_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['refund_type'] = $refund_type;

        return $this;
    }

    /**
     * Gets partial_refund_type
     *
     * @return string
     */
    public function getPartialRefundType()
    {
        return $this->container['partial_refund_type'];
    }

    /**
     * Sets partial_refund_type
     *
     * @param string $partial_refund_type Business case of partial refund chosen by partner. Has an impact on the business flow and the PDF.                                                                                              </br>Only available on receipts of receiptType PARTIAL_REFUND and not reliable provides on older partial refunds receipts.  Possible values: * **REFUND_COMPLAINT_ITEM** - Refund because of justified customer complaint on item * **REFUND_PAYPAL_DISPUTE** - Partial or full amount of item price was refunded due to a dispute in Paypal payment * **REFUND_ESCALATION** - Partial amount of item price was refunded due to an escalation * **REFUND_PARTIAL_AMOUNT_AFTER_SERVICE_CANCELLATION** - Lowering of service price after service was not fulfilled completely * **REFUND_CREDIT_CARD_DISPUTE** - Partial or full amount of item price was refunded due to a dispute in CREDIT_CARD payment
     *
     * @return $this
     */
    public function setPartialRefundType($partial_refund_type)
    {
        $allowedValues = $this->getPartialRefundTypeAllowableValues();
        if (!is_null($partial_refund_type) && !in_array($partial_refund_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'partial_refund_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partial_refund_type'] = $partial_refund_type;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return AllOfReceiptReceiptsV3AmountDue
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param AllOfReceiptReceiptsV3AmountDue $amount_due The amountDue documents the gross amount a customer still has to pay or will be refunded respectively owes less (the latter decision depends on the chosen payment method) with this receipt. </br>As in case of receiptType PURCHASE and a prepaid payment method we know for sure that the customer has already paid in advance, so the amount is 0 € otherwise the content is identically with totalsGrossAmount
     *
     * @return $this
     */
    public function setAmountDue($amount_due)
    {
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets totals_gross_amount
     *
     * @return AllOfReceiptReceiptsV3TotalsGrossAmount
     */
    public function getTotalsGrossAmount()
    {
        return $this->container['totals_gross_amount'];
    }

    /**
     * Sets totals_gross_amount
     *
     * @param AllOfReceiptReceiptsV3TotalsGrossAmount $totals_gross_amount Gross amounts of totals summed up over all prices. Only available on receipts of receiptType PURCHASE
     *
     * @return $this
     */
    public function setTotalsGrossAmount($totals_gross_amount)
    {
        $this->container['totals_gross_amount'] = $totals_gross_amount;

        return $this;
    }

    /**
     * Gets totals_reductions
     *
     * @return \cbdesk\otto\Client\Model\TotalsReductionReceiptsV3[]
     */
    public function getTotalsReductions()
    {
        return $this->container['totals_reductions'];
    }

    /**
     * Sets totals_reductions
     *
     * @param \cbdesk\otto\Client\Model\TotalsReductionReceiptsV3[] $totals_reductions Reduction amounts on total value of receipts (currently it includes voucher reduction)
     *
     * @return $this
     */
    public function setTotalsReductions($totals_reductions)
    {
        $this->container['totals_reductions'] = $totals_reductions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
