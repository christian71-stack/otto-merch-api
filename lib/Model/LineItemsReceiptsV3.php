<?php
/**
 * LineItemsReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * LineItemsReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Line items for which settlement is made.  ATTENTION: * In previous version this name was used for  itemPositions only. Now there is a substructure that cares about all billing object of a receipt * The object is currently define by mistake as required, we will change it in future as itâ€™s possible that we introduce new receiptTypes without lineItems. For current receiptTypes PURCHASE, PARTIAL_REFUND and REFUND lineItems will always exists.
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LineItemsReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LineItems__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_positions' => '\cbdesk\otto\Client\Model\ItemPositionReceiptsV3[]',
        'item_partial_refund_positions' => '\cbdesk\otto\Client\Model\ItemPartialRefundPositionReceiptsV3[]',
        'service_positions' => '\cbdesk\otto\Client\Model\ServicePositionReceiptsV3[]',
        'service_partial_refund_positions' => '\cbdesk\otto\Client\Model\ServicePartialRefundPositionReceiptsV3[]',
        'delivery_costs' => '\cbdesk\otto\Client\Model\DeliveryCostReceiptsV3[]',
        'delivery_fee_partial_refund_positions' => '\cbdesk\otto\Client\Model\DeliveryCostPartialRefundPositionReceiptsV3[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_positions' => null,
        'item_partial_refund_positions' => null,
        'service_positions' => null,
        'service_partial_refund_positions' => null,
        'delivery_costs' => null,
        'delivery_fee_partial_refund_positions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_positions' => 'itemPositions',
        'item_partial_refund_positions' => 'itemPartialRefundPositions',
        'service_positions' => 'servicePositions',
        'service_partial_refund_positions' => 'servicePartialRefundPositions',
        'delivery_costs' => 'deliveryCosts',
        'delivery_fee_partial_refund_positions' => 'deliveryFeePartialRefundPositions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_positions' => 'setItemPositions',
        'item_partial_refund_positions' => 'setItemPartialRefundPositions',
        'service_positions' => 'setServicePositions',
        'service_partial_refund_positions' => 'setServicePartialRefundPositions',
        'delivery_costs' => 'setDeliveryCosts',
        'delivery_fee_partial_refund_positions' => 'setDeliveryFeePartialRefundPositions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_positions' => 'getItemPositions',
        'item_partial_refund_positions' => 'getItemPartialRefundPositions',
        'service_positions' => 'getServicePositions',
        'service_partial_refund_positions' => 'getServicePartialRefundPositions',
        'delivery_costs' => 'getDeliveryCosts',
        'delivery_fee_partial_refund_positions' => 'getDeliveryFeePartialRefundPositions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_positions'] = isset($data['item_positions']) ? $data['item_positions'] : null;
        $this->container['item_partial_refund_positions'] = isset($data['item_partial_refund_positions']) ? $data['item_partial_refund_positions'] : null;
        $this->container['service_positions'] = isset($data['service_positions']) ? $data['service_positions'] : null;
        $this->container['service_partial_refund_positions'] = isset($data['service_partial_refund_positions']) ? $data['service_partial_refund_positions'] : null;
        $this->container['delivery_costs'] = isset($data['delivery_costs']) ? $data['delivery_costs'] : null;
        $this->container['delivery_fee_partial_refund_positions'] = isset($data['delivery_fee_partial_refund_positions']) ? $data['delivery_fee_partial_refund_positions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_positions'] === null) {
            $invalidProperties[] = "'item_positions' can't be null";
        }
        if ($this->container['item_partial_refund_positions'] === null) {
            $invalidProperties[] = "'item_partial_refund_positions' can't be null";
        }
        if ($this->container['service_positions'] === null) {
            $invalidProperties[] = "'service_positions' can't be null";
        }
        if ($this->container['service_partial_refund_positions'] === null) {
            $invalidProperties[] = "'service_partial_refund_positions' can't be null";
        }
        if ($this->container['delivery_costs'] === null) {
            $invalidProperties[] = "'delivery_costs' can't be null";
        }
        if ($this->container['delivery_fee_partial_refund_positions'] === null) {
            $invalidProperties[] = "'delivery_fee_partial_refund_positions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_positions
     *
     * @return \cbdesk\otto\Client\Model\ItemPositionReceiptsV3[]
     */
    public function getItemPositions()
    {
        return $this->container['item_positions'];
    }

    /**
     * Sets item_positions
     *
     * @param \cbdesk\otto\Client\Model\ItemPositionReceiptsV3[] $item_positions List of billed items, if exists. </br>This list is only used in context of receiptType PURCHASE or REFUND. </br>If there are no entries the lists is displayed as empty
     *
     * @return $this
     */
    public function setItemPositions($item_positions)
    {
        $this->container['item_positions'] = $item_positions;

        return $this;
    }

    /**
     * Gets item_partial_refund_positions
     *
     * @return \cbdesk\otto\Client\Model\ItemPartialRefundPositionReceiptsV3[]
     */
    public function getItemPartialRefundPositions()
    {
        return $this->container['item_partial_refund_positions'];
    }

    /**
     * Sets item_partial_refund_positions
     *
     * @param \cbdesk\otto\Client\Model\ItemPartialRefundPositionReceiptsV3[] $item_partial_refund_positions List of billed partial refunds of items. </br>This list is only used in context of receiptType PARTIAL_REFUND. </br>If there are no entries the lists is displayed as empty
     *
     * @return $this
     */
    public function setItemPartialRefundPositions($item_partial_refund_positions)
    {
        $this->container['item_partial_refund_positions'] = $item_partial_refund_positions;

        return $this;
    }

    /**
     * Gets service_positions
     *
     * @return \cbdesk\otto\Client\Model\ServicePositionReceiptsV3[]
     */
    public function getServicePositions()
    {
        return $this->container['service_positions'];
    }

    /**
     * Sets service_positions
     *
     * @param \cbdesk\otto\Client\Model\ServicePositionReceiptsV3[] $service_positions List of billed B2C services, if exists for this receipt. </br>This list is only used in context of receiptType PURCHASE or REFUND. </br>If there are no entries the lists is displayed as empty
     *
     * @return $this
     */
    public function setServicePositions($service_positions)
    {
        $this->container['service_positions'] = $service_positions;

        return $this;
    }

    /**
     * Gets service_partial_refund_positions
     *
     * @return \cbdesk\otto\Client\Model\ServicePartialRefundPositionReceiptsV3[]
     */
    public function getServicePartialRefundPositions()
    {
        return $this->container['service_partial_refund_positions'];
    }

    /**
     * Sets service_partial_refund_positions
     *
     * @param \cbdesk\otto\Client\Model\ServicePartialRefundPositionReceiptsV3[] $service_partial_refund_positions List of billed partial refunds of services.
     *
     * @return $this
     */
    public function setServicePartialRefundPositions($service_partial_refund_positions)
    {
        $this->container['service_partial_refund_positions'] = $service_partial_refund_positions;

        return $this;
    }

    /**
     * Gets delivery_costs
     *
     * @return \cbdesk\otto\Client\Model\DeliveryCostReceiptsV3[]
     */
    public function getDeliveryCosts()
    {
        return $this->container['delivery_costs'];
    }

    /**
     * Sets delivery_costs
     *
     * @param \cbdesk\otto\Client\Model\DeliveryCostReceiptsV3[] $delivery_costs List of billed logistic costs, if exists for this receipt. </br>This list is only used in context of receiptType PURCHASE or REFUND. </br>If there are no entries the lists is displayed as empty
     *
     * @return $this
     */
    public function setDeliveryCosts($delivery_costs)
    {
        $this->container['delivery_costs'] = $delivery_costs;

        return $this;
    }

    /**
     * Gets delivery_fee_partial_refund_positions
     *
     * @return \cbdesk\otto\Client\Model\DeliveryCostPartialRefundPositionReceiptsV3[]
     */
    public function getDeliveryFeePartialRefundPositions()
    {
        return $this->container['delivery_fee_partial_refund_positions'];
    }

    /**
     * Sets delivery_fee_partial_refund_positions
     *
     * @param \cbdesk\otto\Client\Model\DeliveryCostPartialRefundPositionReceiptsV3[] $delivery_fee_partial_refund_positions This information is currently not available, will be an empty array.
     *
     * @return $this
     */
    public function setDeliveryFeePartialRefundPositions($delivery_fee_partial_refund_positions)
    {
        $this->container['delivery_fee_partial_refund_positions'] = $delivery_fee_partial_refund_positions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
