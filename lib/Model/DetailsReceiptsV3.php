<?php
/**
 * DetailsReceiptsV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * DetailsReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Additional information of increase or decrease of the line item described by this PriceModification object
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DetailsReceiptsV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Details__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'id' => 'string',
        'linked_receipt_number' => 'string',
        'linked_receipt_creation_date' => '\DateTime',
        'type' => 'string',
        'reason' => 'string',
        'linked_position_item_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'id' => null,
        'linked_receipt_number' => null,
        'linked_receipt_creation_date' => 'date-time',
        'type' => null,
        'reason' => null,
        'linked_position_item_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'id' => 'id',
        'linked_receipt_number' => 'linkedReceiptNumber',
        'linked_receipt_creation_date' => 'linkedReceiptCreationDate',
        'type' => 'type',
        'reason' => 'reason',
        'linked_position_item_id' => 'linkedPositionItemId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'id' => 'setId',
        'linked_receipt_number' => 'setLinkedReceiptNumber',
        'linked_receipt_creation_date' => 'setLinkedReceiptCreationDate',
        'type' => 'setType',
        'reason' => 'setReason',
        'linked_position_item_id' => 'setLinkedPositionItemId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'id' => 'getId',
        'linked_receipt_number' => 'getLinkedReceiptNumber',
        'linked_receipt_creation_date' => 'getLinkedReceiptCreationDate',
        'type' => 'getType',
        'reason' => 'getReason',
        'linked_position_item_id' => 'getLinkedPositionItemId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PARTNER_DISCOUNT = 'PARTNER_DISCOUNT';
    const TYPE_PLATFORM_DISCOUNT = 'PLATFORM_DISCOUNT';
    const REASON_ITEM_FOR_FREE = 'GOODWILL_ITEM_FOR_FREE';
    const REASON_ITEM_RETURN_REJECTED = 'GOODWILL_ITEM_RETURN_REJECTED';
    const REASON_ITEM_DISCOUNT_EXPIRED = 'GOODWILL_ITEM_DISCOUNT_EXPIRED';
    const REASON_OTHER = 'GOODWILL_OTHER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PARTNER_DISCOUNT,
            self::TYPE_PLATFORM_DISCOUNT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_ITEM_FOR_FREE,
            self::REASON_ITEM_RETURN_REJECTED,
            self::REASON_ITEM_DISCOUNT_EXPIRED,
            self::REASON_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['linked_receipt_number'] = isset($data['linked_receipt_number']) ? $data['linked_receipt_number'] : null;
        $this->container['linked_receipt_creation_date'] = isset($data['linked_receipt_creation_date']) ? $data['linked_receipt_creation_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['linked_position_item_id'] = isset($data['linked_position_item_id']) ? $data['linked_position_item_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Additional info often printed on the pdf for a PriceModification object (on German receipts always in German)</br> If PriceModification object is of type: * **PARTNER_DISCOUNT** - discount name, provided with sales order event as part of positionGroupPrice: (What we print on the pdf ): e.g.  \"1 € Rabatt\" * **DEFECT_COMPENSATION** - ( German translation of defect compensation)  \"**Mängelausgleich**\" * **REFUND_COMPLAINT_ITEM** - hard coded \"Preisnachlass Reklamation Artikel\" * **REFUND_PAYPAL_DISPUTE** - hard coded “Preisnachlass PayPal Disput“ * **REFUND_ESCALATION** - hard coded “Preisnachlass Escalation“ * **REFUND_CREDIT_CARD_DISPUTE** - hard coded \"Preisnachlass CREDIT_CARD Disput\"
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Discount code applied to the order to get a reduction. Available when reduction is of type PARTNER_DISCOUNT
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets linked_receipt_number
     *
     * @return string
     */
    public function getLinkedReceiptNumber()
    {
        return $this->container['linked_receipt_number'];
    }

    /**
     * Sets linked_receipt_number
     *
     * @param string $linked_receipt_number Allows to link an earlier purchase or (partial)refund receipt by human-readable identifier. </br>If PriceModification object is of type: * **DEFECT_COMPENSATION**: In case of previous (partial) refunds this field contains the human-readable identifier of the partial refund with which the previous refund was made
     *
     * @return $this
     */
    public function setLinkedReceiptNumber($linked_receipt_number)
    {
        $this->container['linked_receipt_number'] = $linked_receipt_number;

        return $this;
    }

    /**
     * Gets linked_receipt_creation_date
     *
     * @return \DateTime
     */
    public function getLinkedReceiptCreationDate()
    {
        return $this->container['linked_receipt_creation_date'];
    }

    /**
     * Sets linked_receipt_creation_date
     *
     * @param \DateTime $linked_receipt_creation_date Allows to show creation date of linked earlier purchase or (partial)refund receipt. </br>If PriceModification object is of type: * **DEFECT_COMPENSATION**: In case of previous (partial) refunds this field contains the creation date of linked receipt with which the previous refund was made. (ISO-8601 format)
     *
     * @return $this
     */
    public function setLinkedReceiptCreationDate($linked_receipt_creation_date)
    {
        $this->container['linked_receipt_creation_date'] = $linked_receipt_creation_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The specific types of discounts provided for Marketplace. This field is only applicable when the priceModificationType for the item is PARTNER_DISCOUNT </br>Possible values: * **PARTNER_DISCOUNT** - a Partner Discount provided because of a booked service \"Rabattaktion\" by the partner * **PLATFORM_DISCOUNT** - a Discount for a platform frame provided because of a booked service \"Marktplatz Rabattaktion\" by the partner
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Detailed reason of priceModifications of priceModificationType REFUND_GOODWILL_ITEM.  Possible values: * **GOODWILL_ITEM_FOR_FREE** - Refund item price as goodwill * **GOODWILL_ITEM_RETURN_REJECTED** - Price reduction after return rejection as goodwill * **GOODWILL_ITEM_DISCOUNT_EXPIRED** - Price reduction after using old discount code as goodwill * **GOODWILL_OTHER** - Individual price reduction as goodwill
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets linked_position_item_id
     *
     * @return string
     */
    public function getLinkedPositionItemId()
    {
        return $this->container['linked_position_item_id'];
    }

    /**
     * Sets linked_position_item_id
     *
     * @param string $linked_position_item_id Allows to show the unique identifier (salesOrder)PositionItem of an earlier (partial)refund receipt of items.</br> A (salesOrder)PositionItem is the smallest unit of an item that can be ordered.  It will be present in refund receipts for those _“priceModificationType” which are applicable after purchase receipts are generated_.
     *
     * @return $this
     */
    public function setLinkedPositionItemId($linked_position_item_id)
    {
        $this->container['linked_position_item_id'] = $linked_position_item_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
