<?php
/**
 * ReturnsWarehouseAddressRequestReturnsWarehouseV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Model;

use ArrayAccess;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * ReturnsWarehouseAddressRequestReturnsWarehouseV2 Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReturnsWarehouseAddressRequestReturnsWarehouseV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReturnsWarehouseAddressRequest__ReturnsWarehouse-V2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'return_warehouse_type' => 'string',
        'is_misdirected_address' => 'bool',
        'return_recipient' => 'string',
        'return_recipient_suffix' => 'string',
        'is_business_address' => 'bool',
        'return_street' => 'string',
        'return_house_number' => 'string',
        'return_zip_code' => 'string',
        'return_city' => 'string',
        'return_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'return_warehouse_type' => null,
        'is_misdirected_address' => null,
        'return_recipient' => null,
        'return_recipient_suffix' => null,
        'is_business_address' => null,
        'return_street' => null,
        'return_house_number' => null,
        'return_zip_code' => null,
        'return_city' => null,
        'return_country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'return_warehouse_type' => 'returnWarehouseType',
        'is_misdirected_address' => 'isMisdirectedAddress',
        'return_recipient' => 'returnRecipient',
        'return_recipient_suffix' => 'returnRecipientSuffix',
        'is_business_address' => 'isBusinessAddress',
        'return_street' => 'returnStreet',
        'return_house_number' => 'returnHouseNumber',
        'return_zip_code' => 'returnZipCode',
        'return_city' => 'returnCity',
        'return_country' => 'returnCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'return_warehouse_type' => 'setReturnWarehouseType',
        'is_misdirected_address' => 'setIsMisdirectedAddress',
        'return_recipient' => 'setReturnRecipient',
        'return_recipient_suffix' => 'setReturnRecipientSuffix',
        'is_business_address' => 'setIsBusinessAddress',
        'return_street' => 'setReturnStreet',
        'return_house_number' => 'setReturnHouseNumber',
        'return_zip_code' => 'setReturnZipCode',
        'return_city' => 'setReturnCity',
        'return_country' => 'setReturnCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'return_warehouse_type' => 'getReturnWarehouseType',
        'is_misdirected_address' => 'getIsMisdirectedAddress',
        'return_recipient' => 'getReturnRecipient',
        'return_recipient_suffix' => 'getReturnRecipientSuffix',
        'is_business_address' => 'getIsBusinessAddress',
        'return_street' => 'getReturnStreet',
        'return_house_number' => 'getReturnHouseNumber',
        'return_zip_code' => 'getReturnZipCode',
        'return_city' => 'getReturnCity',
        'return_country' => 'getReturnCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RETURN_WAREHOUSE_TYPE_NATIONAL = 'NATIONAL';
    const RETURN_WAREHOUSE_TYPE_INTERNATIONAL = 'INTERNATIONAL';
    const RETURN_WAREHOUSE_TYPE_INTERNATIONAL_CONSOLIDATION_HUB = 'INTERNATIONAL_CONSOLIDATION_HUB';
    const RETURN_COUNTRY_GERMANY = 'Germany';
    const RETURN_COUNTRY_ITALY = 'Italy';
    const RETURN_COUNTRY_POLAND = 'Poland';
    const RETURN_COUNTRY_CZECHIA = 'Czechia';
    const RETURN_COUNTRY_NETHERLANDS = 'Netherlands';
    const RETURN_COUNTRY_FRANCE = 'France';
    const RETURN_COUNTRY_AUSTRIA = 'Austria';
    const RETURN_COUNTRY_SPAIN = 'Spain';
    const RETURN_COUNTRY_DENMARK = 'Denmark';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnWarehouseTypeAllowableValues()
    {
        return [
            self::RETURN_WAREHOUSE_TYPE_NATIONAL,
            self::RETURN_WAREHOUSE_TYPE_INTERNATIONAL,
            self::RETURN_WAREHOUSE_TYPE_INTERNATIONAL_CONSOLIDATION_HUB,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnCountryAllowableValues()
    {
        return [
            self::RETURN_COUNTRY_GERMANY,
            self::RETURN_COUNTRY_ITALY,
            self::RETURN_COUNTRY_POLAND,
            self::RETURN_COUNTRY_CZECHIA,
            self::RETURN_COUNTRY_NETHERLANDS,
            self::RETURN_COUNTRY_FRANCE,
            self::RETURN_COUNTRY_AUSTRIA,
            self::RETURN_COUNTRY_SPAIN,
            self::RETURN_COUNTRY_DENMARK
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['return_warehouse_type'] = isset($data['return_warehouse_type']) ? $data['return_warehouse_type'] : null;
        $this->container['is_misdirected_address'] = isset($data['is_misdirected_address']) ? $data['is_misdirected_address'] : null;
        $this->container['return_recipient'] = isset($data['return_recipient']) ? $data['return_recipient'] : null;
        $this->container['return_recipient_suffix'] = isset($data['return_recipient_suffix']) ? $data['return_recipient_suffix'] : null;
        $this->container['is_business_address'] = isset($data['is_business_address']) ? $data['is_business_address'] : null;
        $this->container['return_street'] = isset($data['return_street']) ? $data['return_street'] : null;
        $this->container['return_house_number'] = isset($data['return_house_number']) ? $data['return_house_number'] : null;
        $this->container['return_zip_code'] = isset($data['return_zip_code']) ? $data['return_zip_code'] : null;
        $this->container['return_city'] = isset($data['return_city']) ? $data['return_city'] : null;
        $this->container['return_country'] = isset($data['return_country']) ? $data['return_country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['return_warehouse_type'] === null) {
            $invalidProperties[] = "'return_warehouse_type' can't be null";
        }
        $allowedValues = $this->getReturnWarehouseTypeAllowableValues();
        if (!is_null($this->container['return_warehouse_type']) && !in_array($this->container['return_warehouse_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'return_warehouse_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['return_recipient'] === null) {
            $invalidProperties[] = "'return_recipient' can't be null";
        }
        $allowedValues = $this->getReturnCountryAllowableValues();
        if (!is_null($this->container['return_country']) && !in_array($this->container['return_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'return_country', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets return_warehouse_type
     *
     * @return string
     */
    public function getReturnWarehouseType()
    {
        return $this->container['return_warehouse_type'];
    }

    /**
     * Sets return_warehouse_type
     *
     * @param string $return_warehouse_type The field is case sensitive and defines the type of returnWarehouse. If returnWarehouseType is NATIONAL then returnCountry should be Germany (case insensitive). If returnWarehouseType is INTERNATIONAL then the returnCountry should be Italy, Poland, Czechia, Netherlands, France, Austria, Spain, or Denmark (case insensitive). If returnWarehouseType is INTERNATIONAL_CONSOLIDATION_HUB then returnCountry should be Germany (case insensitive).
     *
     * @return $this
     */
    public function setReturnWarehouseType($return_warehouse_type)
    {
        $allowedValues = $this->getReturnWarehouseTypeAllowableValues();
        if (!in_array($return_warehouse_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'return_warehouse_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['return_warehouse_type'] = $return_warehouse_type;

        return $this;
    }

    /**
     * Gets is_misdirected_address
     *
     * @return bool
     */
    public function getIsMisdirectedAddress()
    {
        return $this->container['is_misdirected_address'];
    }

    /**
     * Sets is_misdirected_address
     *
     * @param bool $is_misdirected_address Flag to indicate whether the returnWarehouse is a misdirected address or not. One address should be marked as 'isMisdirectedAddress' to handle misdirected returns. Default value is false.
     *
     * @return $this
     */
    public function setIsMisdirectedAddress($is_misdirected_address)
    {
        $this->container['is_misdirected_address'] = $is_misdirected_address;

        return $this;
    }

    /**
     * Gets return_recipient
     *
     * @return string
     */
    public function getReturnRecipient()
    {
        return $this->container['return_recipient'];
    }

    /**
     * Sets return_recipient
     *
     * @param string $return_recipient Return recipient of the returnWarehouse.
     *
     * @return $this
     */
    public function setReturnRecipient($return_recipient)
    {
        $this->container['return_recipient'] = $return_recipient;

        return $this;
    }

    /**
     * Gets return_recipient_suffix
     *
     * @return string
     */
    public function getReturnRecipientSuffix()
    {
        return $this->container['return_recipient_suffix'];
    }

    /**
     * Sets return_recipient_suffix
     *
     * @param string $return_recipient_suffix Return recipient suffix of the returnWarehouse
     *
     * @return $this
     */
    public function setReturnRecipientSuffix($return_recipient_suffix)
    {
        $this->container['return_recipient_suffix'] = $return_recipient_suffix;

        return $this;
    }

    /**
     * Gets is_business_address
     *
     * @return bool
     */
    public function getIsBusinessAddress()
    {
        return $this->container['is_business_address'];
    }

    /**
     * Sets is_business_address
     *
     * @param bool $is_business_address Flag to indicate whether the returnWarehouse is a business address or not.Required field if returnWarehouseType=NATIONAL.
     *
     * @return $this
     */
    public function setIsBusinessAddress($is_business_address)
    {
        $this->container['is_business_address'] = $is_business_address;

        return $this;
    }

    /**
     * Gets return_street
     *
     * @return string
     */
    public function getReturnStreet()
    {
        return $this->container['return_street'];
    }

    /**
     * Sets return_street
     *
     * @param string $return_street Return street name of the returnWarehouse, required field if isBusinessAddress=false or returnWarehouseType=INTERNATIONAL.
     *
     * @return $this
     */
    public function setReturnStreet($return_street)
    {
        $this->container['return_street'] = $return_street;

        return $this;
    }

    /**
     * Gets return_house_number
     *
     * @return string
     */
    public function getReturnHouseNumber()
    {
        return $this->container['return_house_number'];
    }

    /**
     * Sets return_house_number
     *
     * @param string $return_house_number Return House number of the returnWarehouse, required field if isBusinessAddress=false or returnWarehouseType=INTERNATIONAL.
     *
     * @return $this
     */
    public function setReturnHouseNumber($return_house_number)
    {
        $this->container['return_house_number'] = $return_house_number;

        return $this;
    }

    /**
     * Gets return_zip_code
     *
     * @return string
     */
    public function getReturnZipCode()
    {
        return $this->container['return_zip_code'];
    }

    /**
     * Sets return_zip_code
     *
     * @param string $return_zip_code Return Zip code of the returnWarehouse, required field if returnWarehouseType=INTERNATIONAL or NATIONAL.
     *
     * @return $this
     */
    public function setReturnZipCode($return_zip_code)
    {
        $this->container['return_zip_code'] = $return_zip_code;

        return $this;
    }

    /**
     * Gets return_city
     *
     * @return string
     */
    public function getReturnCity()
    {
        return $this->container['return_city'];
    }

    /**
     * Sets return_city
     *
     * @param string $return_city Return City Name of the returnWarehouse, required field if returnWarehouseType=INTERNATIONAL or NATIONAL.
     *
     * @return $this
     */
    public function setReturnCity($return_city)
    {
        $this->container['return_city'] = $return_city;

        return $this;
    }

    /**
     * Gets return_country
     *
     * @return string
     */
    public function getReturnCountry()
    {
        return $this->container['return_country'];
    }

    /**
     * Sets return_country
     *
     * @param string $return_country Country of the return address. For returnWarehouseType=NATIONAL, this should be Germany (case insensitive). For returnWarehouseType=INTERNATIONAL, this should be one of Italy, Poland, Czechia, Netherlands, France, Austria, Spain, or Denmark (case insensitive). For returnWarehouseType=INTERNATIONAL_CONSOLIDATION_HUB, this should be Germany (case insensitive).
     *
     * @return $this
     */
    public function setReturnCountry($return_country)
    {
        $allowedValues = $this->getReturnCountryAllowableValues();
        if (!is_null($return_country) && !in_array($return_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'return_country', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['return_country'] = $return_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
