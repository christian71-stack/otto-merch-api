<?php
/**
 * ReturnShipmentsV1Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.69
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cbdesk\otto\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cbdesk\otto\Client\ApiException;
use cbdesk\otto\Client\Configuration;
use cbdesk\otto\Client\HeaderSelector;
use cbdesk\otto\Client\ObjectSerializer;

/**
 * ReturnShipmentsV1Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReturnShipmentsV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation returnShipmentsV1ListReturnShipmentsUsingGET
     *
     * Retrieve returnShipments.
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \cbdesk\otto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbdesk\otto\Client\Model\ReturnShipmentListReturnShipmentsV1
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGET($datefrom, $limit = '25', $next = null)
    {
        list($response) = $this->returnShipmentsV1ListReturnShipmentsUsingGETWithHttpInfo($datefrom, $limit, $next);
        return $response;
    }

    /**
     * Operation returnShipmentsV1ListReturnShipmentsUsingGETWithHttpInfo
     *
     * Retrieve returnShipments.
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \cbdesk\otto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\otto\Client\Model\ReturnShipmentListReturnShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGETWithHttpInfo($datefrom, $limit = '25', $next = null)
    {
        $returnType = '\cbdesk\otto\Client\Model\ReturnShipmentListReturnShipmentsV1';
        $request = $this->returnShipmentsV1ListReturnShipmentsUsingGETRequest($datefrom, $limit, $next);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\ReturnShipmentListReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\BadRequestReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\UnauthorizedReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\InternalServerErrorGetReturnShipmentListReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnShipmentsV1ListReturnShipmentsUsingGETAsync
     *
     * Retrieve returnShipments.
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGETAsync($datefrom, $limit = '25', $next = null)
    {
        return $this->returnShipmentsV1ListReturnShipmentsUsingGETAsyncWithHttpInfo($datefrom, $limit, $next)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnShipmentsV1ListReturnShipmentsUsingGETAsyncWithHttpInfo
     *
     * Retrieve returnShipments.
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGETAsyncWithHttpInfo($datefrom, $limit = '25', $next = null)
    {
        $returnType = '\cbdesk\otto\Client\Model\ReturnShipmentListReturnShipmentsV1';
        $request = $this->returnShipmentsV1ListReturnShipmentsUsingGETRequest($datefrom, $limit, $next);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnShipmentsV1ListReturnShipmentsUsingGET'
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function returnShipmentsV1ListReturnShipmentsUsingGETRequest($datefrom, $limit = '25', $next = null)
    {
        // verify the required parameter 'datefrom' is set
        if ($datefrom === null || (is_array($datefrom) && count($datefrom) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $datefrom when calling returnShipmentsV1ListReturnShipmentsUsingGET'
            );
        }

        $resourcePath = '/v1/return-shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datefrom !== null) {
            $queryParams['datefrom'] = ObjectSerializer::toQueryValue($datefrom, 'date-time');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($next !== null) {
            $queryParams['next'] = ObjectSerializer::toQueryValue($next, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET
     *
     * Retrieve returnShipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $tracking_number The tracking number of the returnShipment assigned by the carrier. (required)
     *
     * @throws \cbdesk\otto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET($carrier, $tracking_number)
    {
        list($response) = $this->returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo($carrier, $tracking_number);
        return $response;
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo
     *
     * Retrieve returnShipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $tracking_number The tracking number of the returnShipment assigned by the carrier. (required)
     *
     * @throws \cbdesk\otto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo($carrier, $tracking_number)
    {
        $returnType = '\cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1';
        $request = $this->returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $tracking_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\BadRequestReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\UnauthorizedReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\ForbiddenGetReturnShipmentByTrackingNumberReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\NotFoundGetReturnShipmentByTrackingNumberReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\InternalServerErrorGetReturnShipmentByTrackingNumberReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsync
     *
     * Retrieve returnShipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $tracking_number The tracking number of the returnShipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsync($carrier, $tracking_number)
    {
        return $this->returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo($carrier, $tracking_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo
     *
     * Retrieve returnShipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $tracking_number The tracking number of the returnShipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo($carrier, $tracking_number)
    {
        $returnType = '\cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1';
        $request = $this->returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $tracking_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $tracking_number The tracking number of the returnShipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $tracking_number)
    {
        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'
            );
        }
        // verify the required parameter 'tracking_number' is set
        if ($tracking_number === null || (is_array($tracking_number) && count($tracking_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_number when calling returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'
            );
        }

        $resourcePath = '/v1/return-shipments/carriers/{carrier}/trackingnumbers/{trackingNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier !== null) {
            $resourcePath = str_replace(
                '{' . 'carrier' . '}',
                ObjectSerializer::toPathValue($carrier),
                $resourcePath
            );
        }
        // path params
        if ($tracking_number !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($tracking_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentUsingGET
     *
     * Retrieve returnShipments by returnShipment ID.
     *
     * @param  string $return_shipment_id Internal return shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \cbdesk\otto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1
     */
    public function returnShipmentsV1ReturnShipmentUsingGET($return_shipment_id)
    {
        list($response) = $this->returnShipmentsV1ReturnShipmentUsingGETWithHttpInfo($return_shipment_id);
        return $response;
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentUsingGETWithHttpInfo
     *
     * Retrieve returnShipments by returnShipment ID.
     *
     * @param  string $return_shipment_id Internal return shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \cbdesk\otto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnShipmentsV1ReturnShipmentUsingGETWithHttpInfo($return_shipment_id)
    {
        $returnType = '\cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1';
        $request = $this->returnShipmentsV1ReturnShipmentUsingGETRequest($return_shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\BadRequestReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\UnauthorizedReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\ForbiddenGetReturnShipmentByReturnShipmentIdReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\NotFoundGetReturnShipmentByReturnShipmentIdReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\otto\Client\Model\InternalServerErrorGetReturnShipmentByReturnShipmentIdReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentUsingGETAsync
     *
     * Retrieve returnShipments by returnShipment ID.
     *
     * @param  string $return_shipment_id Internal return shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ReturnShipmentUsingGETAsync($return_shipment_id)
    {
        return $this->returnShipmentsV1ReturnShipmentUsingGETAsyncWithHttpInfo($return_shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentUsingGETAsyncWithHttpInfo
     *
     * Retrieve returnShipments by returnShipment ID.
     *
     * @param  string $return_shipment_id Internal return shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ReturnShipmentUsingGETAsyncWithHttpInfo($return_shipment_id)
    {
        $returnType = '\cbdesk\otto\Client\Model\ReturnShipmentReturnShipmentsV1';
        $request = $this->returnShipmentsV1ReturnShipmentUsingGETRequest($return_shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnShipmentsV1ReturnShipmentUsingGET'
     *
     * @param  string $return_shipment_id Internal return shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function returnShipmentsV1ReturnShipmentUsingGETRequest($return_shipment_id)
    {
        // verify the required parameter 'return_shipment_id' is set
        if ($return_shipment_id === null || (is_array($return_shipment_id) && count($return_shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_shipment_id when calling returnShipmentsV1ReturnShipmentUsingGET'
            );
        }

        $resourcePath = '/v1/return-shipments/{returnShipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($return_shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnShipmentId' . '}',
                ObjectSerializer::toPathValue($return_shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
